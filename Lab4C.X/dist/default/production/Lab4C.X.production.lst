

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Jul 17 14:39:32 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    29                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    31   000000                     
    32                           ; Generated 25/07/2024 GMT
    33                           ; 
    34                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution. Publication is not required when
    48                           ;        this file is used in an embedded application.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F4550 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66   000FE0                     bsr             equ	4064
    67   000FE9                     fsr0            equ	4073
    68   000FEA                     fsr0h           equ	4074
    69   000FE9                     fsr0l           equ	4073
    70   000FE1                     fsr1            equ	4065
    71   000FE2                     fsr1h           equ	4066
    72   000FE1                     fsr1l           equ	4065
    73   000FD9                     fsr2            equ	4057
    74   000FDA                     fsr2h           equ	4058
    75   000FD9                     fsr2l           equ	4057
    76   000FEF                     indf0           equ	4079
    77   000FE7                     indf1           equ	4071
    78   000FDF                     indf2           equ	4063
    79   000FF2                     intcon          equ	4082
    80   000000                     nvmcon          equ	0
    81   000FF9                     pcl             equ	4089
    82   000FFA                     pclath          equ	4090
    83   000FFB                     pclatu          equ	4091
    84   000FEB                     plusw0          equ	4075
    85   000FE3                     plusw1          equ	4067
    86   000FDB                     plusw2          equ	4059
    87   000FED                     postdec0        equ	4077
    88   000FE5                     postdec1        equ	4069
    89   000FDD                     postdec2        equ	4061
    90   000FEE                     postinc0        equ	4078
    91   000FE6                     postinc1        equ	4070
    92   000FDE                     postinc2        equ	4062
    93   000FEC                     preinc0         equ	4076
    94   000FE4                     preinc1         equ	4068
    95   000FDC                     preinc2         equ	4060
    96   000FF3                     prod            equ	4083
    97   000FF4                     prodh           equ	4084
    98   000FF3                     prodl           equ	4083
    99   000FD8                     status          equ	4056
   100   000FF5                     tablat          equ	4085
   101   000FF6                     tblptr          equ	4086
   102   000FF7                     tblptrh         equ	4087
   103   000FF6                     tblptrl         equ	4086
   104   000FF8                     tblptru         equ	4088
   105   000FFD                     tosl            equ	4093
   106   000FE8                     wreg            equ	4072
   107   000F62                     SPPDATA         equ	3938	;# 
   108   000F63                     SPPCFG          equ	3939	;# 
   109   000F64                     SPPEPS          equ	3940	;# 
   110   000F65                     SPPCON          equ	3941	;# 
   111   000F66                     UFRM            equ	3942	;# 
   112   000F66                     UFRML           equ	3942	;# 
   113   000F67                     UFRMH           equ	3943	;# 
   114   000F68                     UIR             equ	3944	;# 
   115   000F69                     UIE             equ	3945	;# 
   116   000F6A                     UEIR            equ	3946	;# 
   117   000F6B                     UEIE            equ	3947	;# 
   118   000F6C                     USTAT           equ	3948	;# 
   119   000F6D                     UCON            equ	3949	;# 
   120   000F6E                     UADDR           equ	3950	;# 
   121   000F6F                     UCFG            equ	3951	;# 
   122   000F70                     UEP0            equ	3952	;# 
   123   000F71                     UEP1            equ	3953	;# 
   124   000F72                     UEP2            equ	3954	;# 
   125   000F73                     UEP3            equ	3955	;# 
   126   000F74                     UEP4            equ	3956	;# 
   127   000F75                     UEP5            equ	3957	;# 
   128   000F76                     UEP6            equ	3958	;# 
   129   000F77                     UEP7            equ	3959	;# 
   130   000F78                     UEP8            equ	3960	;# 
   131   000F79                     UEP9            equ	3961	;# 
   132   000F7A                     UEP10           equ	3962	;# 
   133   000F7B                     UEP11           equ	3963	;# 
   134   000F7C                     UEP12           equ	3964	;# 
   135   000F7D                     UEP13           equ	3965	;# 
   136   000F7E                     UEP14           equ	3966	;# 
   137   000F7F                     UEP15           equ	3967	;# 
   138   000F80                     PORTA           equ	3968	;# 
   139   000F81                     PORTB           equ	3969	;# 
   140   000F82                     PORTC           equ	3970	;# 
   141   000F83                     PORTD           equ	3971	;# 
   142   000F84                     PORTE           equ	3972	;# 
   143   000F89                     LATA            equ	3977	;# 
   144   000F8A                     LATB            equ	3978	;# 
   145   000F8B                     LATC            equ	3979	;# 
   146   000F8C                     LATD            equ	3980	;# 
   147   000F8D                     LATE            equ	3981	;# 
   148   000F92                     TRISA           equ	3986	;# 
   149   000F92                     DDRA            equ	3986	;# 
   150   000F93                     TRISB           equ	3987	;# 
   151   000F93                     DDRB            equ	3987	;# 
   152   000F94                     TRISC           equ	3988	;# 
   153   000F94                     DDRC            equ	3988	;# 
   154   000F95                     TRISD           equ	3989	;# 
   155   000F95                     DDRD            equ	3989	;# 
   156   000F96                     TRISE           equ	3990	;# 
   157   000F96                     DDRE            equ	3990	;# 
   158   000F9B                     OSCTUNE         equ	3995	;# 
   159   000F9D                     PIE1            equ	3997	;# 
   160   000F9E                     PIR1            equ	3998	;# 
   161   000F9F                     IPR1            equ	3999	;# 
   162   000FA0                     PIE2            equ	4000	;# 
   163   000FA1                     PIR2            equ	4001	;# 
   164   000FA2                     IPR2            equ	4002	;# 
   165   000FA6                     EECON1          equ	4006	;# 
   166   000FA7                     EECON2          equ	4007	;# 
   167   000FA8                     EEDATA          equ	4008	;# 
   168   000FA9                     EEADR           equ	4009	;# 
   169   000FAB                     RCSTA           equ	4011	;# 
   170   000FAB                     RCSTA1          equ	4011	;# 
   171   000FAC                     TXSTA           equ	4012	;# 
   172   000FAC                     TXSTA1          equ	4012	;# 
   173   000FAD                     TXREG           equ	4013	;# 
   174   000FAD                     TXREG1          equ	4013	;# 
   175   000FAE                     RCREG           equ	4014	;# 
   176   000FAE                     RCREG1          equ	4014	;# 
   177   000FAF                     SPBRG           equ	4015	;# 
   178   000FAF                     SPBRG1          equ	4015	;# 
   179   000FB0                     SPBRGH          equ	4016	;# 
   180   000FB1                     T3CON           equ	4017	;# 
   181   000FB2                     TMR3            equ	4018	;# 
   182   000FB2                     TMR3L           equ	4018	;# 
   183   000FB3                     TMR3H           equ	4019	;# 
   184   000FB4                     CMCON           equ	4020	;# 
   185   000FB5                     CVRCON          equ	4021	;# 
   186   000FB6                     ECCP1AS         equ	4022	;# 
   187   000FB6                     CCP1AS          equ	4022	;# 
   188   000FB7                     ECCP1DEL        equ	4023	;# 
   189   000FB7                     CCP1DEL         equ	4023	;# 
   190   000FB8                     BAUDCON         equ	4024	;# 
   191   000FB8                     BAUDCTL         equ	4024	;# 
   192   000FBA                     CCP2CON         equ	4026	;# 
   193   000FBB                     CCPR2           equ	4027	;# 
   194   000FBB                     CCPR2L          equ	4027	;# 
   195   000FBC                     CCPR2H          equ	4028	;# 
   196   000FBD                     CCP1CON         equ	4029	;# 
   197   000FBD                     ECCP1CON        equ	4029	;# 
   198   000FBE                     CCPR1           equ	4030	;# 
   199   000FBE                     CCPR1L          equ	4030	;# 
   200   000FBF                     CCPR1H          equ	4031	;# 
   201   000FC0                     ADCON2          equ	4032	;# 
   202   000FC1                     ADCON1          equ	4033	;# 
   203   000FC2                     ADCON0          equ	4034	;# 
   204   000FC3                     ADRES           equ	4035	;# 
   205   000FC3                     ADRESL          equ	4035	;# 
   206   000FC4                     ADRESH          equ	4036	;# 
   207   000FC5                     SSPCON2         equ	4037	;# 
   208   000FC6                     SSPCON1         equ	4038	;# 
   209   000FC7                     SSPSTAT         equ	4039	;# 
   210   000FC8                     SSPADD          equ	4040	;# 
   211   000FC9                     SSPBUF          equ	4041	;# 
   212   000FCA                     T2CON           equ	4042	;# 
   213   000FCB                     PR2             equ	4043	;# 
   214   000FCB                     MEMCON          equ	4043	;# 
   215   000FCC                     TMR2            equ	4044	;# 
   216   000FCD                     T1CON           equ	4045	;# 
   217   000FCE                     TMR1            equ	4046	;# 
   218   000FCE                     TMR1L           equ	4046	;# 
   219   000FCF                     TMR1H           equ	4047	;# 
   220   000FD0                     RCON            equ	4048	;# 
   221   000FD1                     WDTCON          equ	4049	;# 
   222   000FD2                     HLVDCON         equ	4050	;# 
   223   000FD2                     LVDCON          equ	4050	;# 
   224   000FD3                     OSCCON          equ	4051	;# 
   225   000FD5                     T0CON           equ	4053	;# 
   226   000FD6                     TMR0            equ	4054	;# 
   227   000FD6                     TMR0L           equ	4054	;# 
   228   000FD7                     TMR0H           equ	4055	;# 
   229   000FD8                     STATUS          equ	4056	;# 
   230   000FD9                     FSR2            equ	4057	;# 
   231   000FD9                     FSR2L           equ	4057	;# 
   232   000FDA                     FSR2H           equ	4058	;# 
   233   000FDB                     PLUSW2          equ	4059	;# 
   234   000FDC                     PREINC2         equ	4060	;# 
   235   000FDD                     POSTDEC2        equ	4061	;# 
   236   000FDE                     POSTINC2        equ	4062	;# 
   237   000FDF                     INDF2           equ	4063	;# 
   238   000FE0                     BSR             equ	4064	;# 
   239   000FE1                     FSR1            equ	4065	;# 
   240   000FE1                     FSR1L           equ	4065	;# 
   241   000FE2                     FSR1H           equ	4066	;# 
   242   000FE3                     PLUSW1          equ	4067	;# 
   243   000FE4                     PREINC1         equ	4068	;# 
   244   000FE5                     POSTDEC1        equ	4069	;# 
   245   000FE6                     POSTINC1        equ	4070	;# 
   246   000FE7                     INDF1           equ	4071	;# 
   247   000FE8                     WREG            equ	4072	;# 
   248   000FE9                     FSR0            equ	4073	;# 
   249   000FE9                     FSR0L           equ	4073	;# 
   250   000FEA                     FSR0H           equ	4074	;# 
   251   000FEB                     PLUSW0          equ	4075	;# 
   252   000FEC                     PREINC0         equ	4076	;# 
   253   000FED                     POSTDEC0        equ	4077	;# 
   254   000FEE                     POSTINC0        equ	4078	;# 
   255   000FEF                     INDF0           equ	4079	;# 
   256   000FF0                     INTCON3         equ	4080	;# 
   257   000FF1                     INTCON2         equ	4081	;# 
   258   000FF2                     INTCON          equ	4082	;# 
   259   000FF3                     PROD            equ	4083	;# 
   260   000FF3                     PRODL           equ	4083	;# 
   261   000FF4                     PRODH           equ	4084	;# 
   262   000FF5                     TABLAT          equ	4085	;# 
   263   000FF6                     TBLPTR          equ	4086	;# 
   264   000FF6                     TBLPTRL         equ	4086	;# 
   265   000FF7                     TBLPTRH         equ	4087	;# 
   266   000FF8                     TBLPTRU         equ	4088	;# 
   267   000FF9                     PCLAT           equ	4089	;# 
   268   000FF9                     PC              equ	4089	;# 
   269   000FF9                     PCL             equ	4089	;# 
   270   000FFA                     PCLATH          equ	4090	;# 
   271   000FFB                     PCLATU          equ	4091	;# 
   272   000FFC                     STKPTR          equ	4092	;# 
   273   000FFD                     TOS             equ	4093	;# 
   274   000FFD                     TOSL            equ	4093	;# 
   275   000FFE                     TOSH            equ	4094	;# 
   276   000FFF                     TOSU            equ	4095	;# 
   277                           
   278                           	psect	idataCOMRAM
   279   0010D2                     __pidataCOMRAM:
   280                           	callstack 0
   281                           
   282                           ;initializer for _interfaz
   283   0010D2  08                 	db	8
   284   007F92                     _TMR0IF         set	32658
   285   007C0F                     _RB7            set	31759
   286   007C0E                     _RB6            set	31758
   287   007C0D                     _RB5            set	31757
   288   007C0C                     _RB4            set	31756
   289   007F97                     _GIE            set	32663
   290   007F93                     _RBIE           set	32659
   291   007F90                     _RBIF           set	32656
   292   007F8F                     _RBPU           set	32655
   293   007C61                     _LATD1          set	31841
   294   007C60                     _LATD0          set	31840
   295   000FD6                     _TMR0           set	4054
   296   000F81                     _PORTB          set	3969
   297   000F8A                     _LATB           set	3978
   298   000F95                     _TRISD          set	3989
   299   000F93                     _TRISB          set	3987
   300   000F8C                     _LATD           set	3980
   301                           
   302                           ; #config settings
   303                           
   304                           	psect	cinit
   305   001046                     __pcinit:
   306                           	callstack 0
   307   001046                     start_initialization:
   308                           	callstack 0
   309   001046                     __initialization:
   310                           	callstack 0
   311                           
   312                           ; Initialize objects allocated to COMRAM (1 bytes)
   313                           ; load TBLPTR registers with __pidataCOMRAM
   314   001046  0ED2               	movlw	low __pidataCOMRAM
   315   001048  6EF6               	movwf	tblptrl,c
   316   00104A  0E10               	movlw	high __pidataCOMRAM
   317   00104C  6EF7               	movwf	tblptrh,c
   318   00104E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   319   001050  6EF8               	movwf	tblptru,c
   320   001052  0009               	tblrd		*+	;fetch initializer
   321   001054  CFF5 F015          	movff	tablat,__pdataCOMRAM
   322                           
   323                           ; Clear objects allocated to COMRAM (3 bytes)
   324   001058  6A14               	clrf	(__pbssCOMRAM+2)& (0+255),c
   325   00105A  6A13               	clrf	(__pbssCOMRAM+1)& (0+255),c
   326   00105C  6A12               	clrf	__pbssCOMRAM& (0+255),c
   327   00105E                     end_of_initialization:
   328                           	callstack 0
   329   00105E                     __end_of__initialization:
   330                           	callstack 0
   331   00105E  9016               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   332   001060  9216               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   333   001062  0E00               	movlw	low (__Lmediumconst shr (0+16))
   334   001064  6EF8               	movwf	tblptru,c
   335   001066  0100               	movlb	0
   336   001068  EF01  F004         	goto	_main	;jump to C main() function
   337                           
   338                           	psect	bssCOMRAM
   339   000012                     __pbssCOMRAM:
   340                           	callstack 0
   341   000012                     _regresiva:
   342                           	callstack 0
   343   000012                     	ds	1
   344   000013                     _piezasAContar:
   345                           	callstack 0
   346   000013                     	ds	1
   347   000014                     _Tecla:
   348                           	callstack 0
   349   000014                     	ds	1
   350                           
   351                           	psect	dataCOMRAM
   352   000015                     __pdataCOMRAM:
   353                           	callstack 0
   354   000015                     _interfaz:
   355                           	callstack 0
   356   000015                     	ds	1
   357                           
   358                           	psect	cstackCOMRAM
   359   000001                     __pcstackCOMRAM:
   360                           	callstack 0
   361   000001                     ??_ISR:
   362                           
   363                           ; 1 bytes @ 0x0
   364   000001                     	ds	1
   365   000002                     ConfiguraLCD@a:
   366                           	callstack 0
   367   000002                     obtenerNumero@tecla:
   368                           	callstack 0
   369   000002                     ___lbmod@divisor:
   370                           	callstack 0
   371   000002                     ??_RetardoLCD:
   372   000002                     
   373                           ; 1 bytes @ 0x1
   374   000002                     	ds	1
   375   000003                     RetardoLCD@a:
   376                           	callstack 0
   377   000003                     ___lbmod@dividend:
   378                           	callstack 0
   379   000003                     
   380                           ; 1 bytes @ 0x2
   381   000003                     	ds	1
   382   000004                     ___lbmod@counter:
   383                           	callstack 0
   384   000004                     ??_EnviaDato:
   385                           
   386                           ; 1 bytes @ 0x3
   387   000004                     	ds	1
   388   000005                     EnviaDato@a:
   389                           	callstack 0
   390   000005                     ___lbmod@rem:
   391                           	callstack 0
   392                           
   393                           ; 1 bytes @ 0x4
   394   000005                     	ds	1
   395   000006                     EscribeLCD_c@a:
   396                           	callstack 0
   397   000006                     DireccionaLCD@a:
   398                           	callstack 0
   399   000006                     ___lbdiv@divisor:
   400                           	callstack 0
   401   000006                     
   402                           ; 1 bytes @ 0x5
   403   000006                     	ds	1
   404   000007                     ___lbdiv@dividend:
   405                           	callstack 0
   406   000007                     
   407                           ; 1 bytes @ 0x6
   408   000007                     	ds	1
   409   000008                     ___lbdiv@counter:
   410                           	callstack 0
   411                           
   412                           ; 1 bytes @ 0x7
   413   000008                     	ds	1
   414   000009                     ___lbdiv@quotient:
   415                           	callstack 0
   416                           
   417                           ; 1 bytes @ 0x8
   418   000009                     	ds	1
   419   00000A                     EscribeLCD_n8@b:
   420                           	callstack 0
   421                           
   422                           ; 1 bytes @ 0x9
   423   00000A                     	ds	1
   424   00000B                     EscribeLCD_n8@centena:
   425                           	callstack 0
   426   00000B                     
   427                           ; 1 bytes @ 0xA
   428   00000B                     	ds	1
   429   00000C                     EscribeLCD_n8@decena:
   430                           	callstack 0
   431                           
   432                           ; 1 bytes @ 0xB
   433   00000C                     	ds	1
   434   00000D                     EscribeLCD_n8@unidad:
   435                           	callstack 0
   436                           
   437                           ; 1 bytes @ 0xC
   438   00000D                     	ds	1
   439   00000E                     EscribeLCD_n8@a:
   440                           	callstack 0
   441                           
   442                           ; 1 bytes @ 0xD
   443   00000E                     	ds	1
   444   00000F                     ??_main:
   445                           
   446                           ; 1 bytes @ 0xE
   447   00000F                     	ds	2
   448   000011                     main@Numero:
   449                           	callstack 0
   450                           
   451                           ; 1 bytes @ 0x10
   452   000011                     	ds	1
   453                           
   454 ;;
   455 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   456 ;;
   457 ;; *************** function _main *****************
   458 ;; Defined at:
   459 ;;		line 39 in file "Lab4C.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;		None
   462 ;; Auto vars:     Size  Location     Type
   463 ;;  Numero          1   16[COMRAM] unsigned char 
   464 ;;  i               1    0        unsigned char 
   465 ;; Return value:  Size  Location     Type
   466 ;;                  1    wreg      void 
   467 ;; Registers used:
   468 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   469 ;; Tracked objects:
   470 ;;		On entry : 0/0
   471 ;;		On exit  : 0/0
   472 ;;		Unchanged: 0/0
   473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   474 ;;      Params:         0       0       0       0       0       0       0       0       0
   475 ;;      Locals:         1       0       0       0       0       0       0       0       0
   476 ;;      Temps:          2       0       0       0       0       0       0       0       0
   477 ;;      Totals:         3       0       0       0       0       0       0       0       0
   478 ;;Total ram usage:        3 bytes
   479 ;; Hardware stack levels required when called: 5
   480 ;; This function calls:
   481 ;;		_BorraLCD
   482 ;;		_ConfiguraLCD
   483 ;;		_DireccionaLCD
   484 ;;		_EscribeLCD_c
   485 ;;		_EscribeLCD_n8
   486 ;;		_InicializaLCD
   487 ;;		_obtenerNumero
   488 ;; This function is called by:
   489 ;;		Startup code after reset
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493                           	psect	text0
   494   000802                     __ptext0:
   495                           	callstack 0
   496   000802                     _main:
   497                           	callstack 26
   498                           
   499                           ;Lab4C.c: 40: unsigned char i;;Lab4C.c: 41: TRISB=0b11110000;
   500                           
   501                           ;incstack = 0
   502   000802  0EF0               	movlw	240
   503   000804  6E93               	movwf	147,c	;volatile
   504                           
   505                           ;Lab4C.c: 42: TRISD=0;
   506   000806  6A95               	clrf	149,c	;volatile
   507                           
   508                           ;Lab4C.c: 43: LATB=0b00000000;
   509   000808  6A8A               	clrf	138,c	;volatile
   510                           
   511                           ;Lab4C.c: 44: LATD=0;
   512   00080A  6A8C               	clrf	140,c	;volatile
   513                           
   514                           ;Lab4C.c: 45: RBPU=0;
   515   00080C  9EF1               	bcf	4081,7,c	;volatile
   516                           
   517                           ;Lab4C.c: 46: _delay((unsigned long)((100)*(1000000/4000.0)));
   518   00080E  0E21               	movlw	33
   519   000810  6E0F               	movwf	??_main^0,c
   520   000812  0E76               	movlw	118
   521   000814                     u587:
   522   000814  2EE8               	decfsz	wreg,f,c
   523   000816  D7FE               	bra	u587
   524   000818  2E0F               	decfsz	??_main^0,f,c
   525   00081A  D7FC               	bra	u587
   526   00081C  D000               	nop2	
   527                           
   528                           ;Lab4C.c: 47: RBIF=0;
   529   00081E  90F2               	bcf	4082,0,c	;volatile
   530                           
   531                           ;Lab4C.c: 48: RBIE=1;
   532   000820  86F2               	bsf	4082,3,c	;volatile
   533                           
   534                           ;Lab4C.c: 49: GIE=1;
   535   000822  8EF2               	bsf	4082,7,c	;volatile
   536                           
   537                           ;Lab4C.c: 50: _delay((unsigned long)((1000)*(1000000/4000.0)));
   538   000824  0E02               	movlw	2
   539   000826  6E10               	movwf	(??_main+1)^0,c
   540   000828  0E45               	movlw	69
   541   00082A  6E0F               	movwf	??_main^0,c
   542   00082C  0EAA               	movlw	170
   543   00082E                     u597:
   544   00082E  2EE8               	decfsz	wreg,f,c
   545   000830  D7FE               	bra	u597
   546   000832  2E0F               	decfsz	??_main^0,f,c
   547   000834  D7FC               	bra	u597
   548   000836  2E10               	decfsz	(??_main+1)^0,f,c
   549   000838  D7FA               	bra	u597
   550                           
   551                           ;Lab4C.c: 51: ConfiguraLCD(4);
   552   00083A  0E04               	movlw	4
   553   00083C  EC36  F008         	call	_ConfiguraLCD
   554                           
   555                           ;Lab4C.c: 52: InicializaLCD();
   556   000840  EC17  F007         	call	_InicializaLCD	;wreg free
   557                           
   558                           ;Lab4C.c: 54: EscribeLCD_c('B');
   559   000844  0E42               	movlw	66
   560   000846  EC42  F008         	call	_EscribeLCD_c
   561                           
   562                           ;Lab4C.c: 55: EscribeLCD_c('i');
   563   00084A  0E69               	movlw	105
   564   00084C  EC42  F008         	call	_EscribeLCD_c
   565                           
   566                           ;Lab4C.c: 56: EscribeLCD_c('e');
   567   000850  0E65               	movlw	101
   568   000852  EC42  F008         	call	_EscribeLCD_c
   569                           
   570                           ;Lab4C.c: 57: EscribeLCD_c('n');
   571   000856  0E6E               	movlw	110
   572   000858  EC42  F008         	call	_EscribeLCD_c
   573                           
   574                           ;Lab4C.c: 58: EscribeLCD_c('v');
   575   00085C  0E76               	movlw	118
   576   00085E  EC42  F008         	call	_EscribeLCD_c
   577                           
   578                           ;Lab4C.c: 59: EscribeLCD_c('e');
   579   000862  0E65               	movlw	101
   580   000864  EC42  F008         	call	_EscribeLCD_c
   581                           
   582                           ;Lab4C.c: 60: EscribeLCD_c('n');
   583   000868  0E6E               	movlw	110
   584   00086A  EC42  F008         	call	_EscribeLCD_c
   585                           
   586                           ;Lab4C.c: 61: EscribeLCD_c('i');
   587   00086E  0E69               	movlw	105
   588   000870  EC42  F008         	call	_EscribeLCD_c
   589                           
   590                           ;Lab4C.c: 62: EscribeLCD_c('d');
   591   000874  0E64               	movlw	100
   592   000876  EC42  F008         	call	_EscribeLCD_c
   593                           
   594                           ;Lab4C.c: 63: EscribeLCD_c('o');
   595   00087A  0E6F               	movlw	111
   596   00087C  EC42  F008         	call	_EscribeLCD_c
   597                           
   598                           ;Lab4C.c: 64: EscribeLCD_c('s');
   599   000880  0E73               	movlw	115
   600   000882  EC42  F008         	call	_EscribeLCD_c
   601                           
   602                           ;Lab4C.c: 65: EscribeLCD_c(' ');
   603   000886  0E20               	movlw	32
   604   000888  EC42  F008         	call	_EscribeLCD_c
   605                           
   606                           ;Lab4C.c: 66: EscribeLCD_c('c');
   607   00088C  0E63               	movlw	99
   608   00088E  EC42  F008         	call	_EscribeLCD_c
   609                           
   610                           ;Lab4C.c: 67: EscribeLCD_c(':');
   611   000892  0E3A               	movlw	58
   612   000894  EC42  F008         	call	_EscribeLCD_c
   613                           
   614                           ;Lab4C.c: 69: _delay((unsigned long)((5000)*(1000000/4000.0)));
   615   000898  0E07               	movlw	7
   616   00089A  6E10               	movwf	(??_main+1)^0,c
   617   00089C  0E58               	movlw	88
   618   00089E  6E0F               	movwf	??_main^0,c
   619   0008A0  0E5A               	movlw	90
   620   0008A2                     u607:
   621   0008A2  2EE8               	decfsz	wreg,f,c
   622   0008A4  D7FE               	bra	u607
   623   0008A6  2E0F               	decfsz	??_main^0,f,c
   624   0008A8  D7FC               	bra	u607
   625   0008AA  2E10               	decfsz	(??_main+1)^0,f,c
   626   0008AC  D7FA               	bra	u607
   627                           
   628                           ;Lab4C.c: 70: BorraLCD();
   629   0008AE  EC58  F008         	call	_BorraLCD	;wreg free
   630                           
   631                           ;Lab4C.c: 71: DireccionaLCD(0x80);
   632   0008B2  0E80               	movlw	128
   633   0008B4  EC4D  F008         	call	_DireccionaLCD
   634                           
   635                           ;Lab4C.c: 72: EscribeLCD_c('P');
   636   0008B8  0E50               	movlw	80
   637   0008BA  EC42  F008         	call	_EscribeLCD_c
   638                           
   639                           ;Lab4C.c: 73: EscribeLCD_c('i');
   640   0008BE  0E69               	movlw	105
   641   0008C0  EC42  F008         	call	_EscribeLCD_c
   642                           
   643                           ;Lab4C.c: 74: EscribeLCD_c('e');
   644   0008C4  0E65               	movlw	101
   645   0008C6  EC42  F008         	call	_EscribeLCD_c
   646                           
   647                           ;Lab4C.c: 75: EscribeLCD_c('z');
   648   0008CA  0E7A               	movlw	122
   649   0008CC  EC42  F008         	call	_EscribeLCD_c
   650                           
   651                           ;Lab4C.c: 76: EscribeLCD_c('a');
   652   0008D0  0E61               	movlw	97
   653   0008D2  EC42  F008         	call	_EscribeLCD_c
   654                           
   655                           ;Lab4C.c: 77: EscribeLCD_c('s');
   656   0008D6  0E73               	movlw	115
   657   0008D8  EC42  F008         	call	_EscribeLCD_c
   658                           
   659                           ;Lab4C.c: 78: EscribeLCD_c(' ');
   660   0008DC  0E20               	movlw	32
   661   0008DE  EC42  F008         	call	_EscribeLCD_c
   662                           
   663                           ;Lab4C.c: 79: EscribeLCD_c('a');
   664   0008E2  0E61               	movlw	97
   665   0008E4  EC42  F008         	call	_EscribeLCD_c
   666                           
   667                           ;Lab4C.c: 80: EscribeLCD_c(' ');
   668   0008E8  0E20               	movlw	32
   669   0008EA  EC42  F008         	call	_EscribeLCD_c
   670                           
   671                           ;Lab4C.c: 81: EscribeLCD_c('c');
   672   0008EE  0E63               	movlw	99
   673   0008F0  EC42  F008         	call	_EscribeLCD_c
   674                           
   675                           ;Lab4C.c: 82: EscribeLCD_c('o');
   676   0008F4  0E6F               	movlw	111
   677   0008F6  EC42  F008         	call	_EscribeLCD_c
   678                           
   679                           ;Lab4C.c: 83: EscribeLCD_c('n');
   680   0008FA  0E6E               	movlw	110
   681   0008FC  EC42  F008         	call	_EscribeLCD_c
   682                           
   683                           ;Lab4C.c: 84: EscribeLCD_c('t');
   684   000900  0E74               	movlw	116
   685   000902  EC42  F008         	call	_EscribeLCD_c
   686                           
   687                           ;Lab4C.c: 85: EscribeLCD_c('a');
   688   000906  0E61               	movlw	97
   689   000908  EC42  F008         	call	_EscribeLCD_c
   690                           
   691                           ;Lab4C.c: 86: EscribeLCD_c('r');
   692   00090C  0E72               	movlw	114
   693   00090E  EC42  F008         	call	_EscribeLCD_c
   694                           
   695                           ;Lab4C.c: 87: EscribeLCD_c(':');
   696   000912  0E3A               	movlw	58
   697   000914  EC42  F008         	call	_EscribeLCD_c
   698                           
   699                           ;Lab4C.c: 88: EscribeLCD_c(' ');
   700   000918  0E20               	movlw	32
   701   00091A  EC42  F008         	call	_EscribeLCD_c
   702                           
   703                           ;Lab4C.c: 90: DireccionaLCD(0xC0);
   704   00091E  0EC0               	movlw	192
   705   000920  EC4D  F008         	call	_DireccionaLCD
   706   000924                     l1689:
   707                           
   708                           ;Lab4C.c: 101: if(Tecla && Tecla != 4 && Tecla <= 11) {
   709   000924  5014               	movf	_Tecla^0,w,c
   710   000926  B4D8               	btfsc	status,2,c
   711   000928  D057               	goto	l1711
   712   00092A  0E04               	movlw	4
   713   00092C  1814               	xorwf	_Tecla^0,w,c
   714   00092E  B4D8               	btfsc	status,2,c
   715   000930  D053               	goto	l1711
   716   000932  0E0C               	movlw	12
   717   000934  6014               	cpfslt	_Tecla^0,c
   718   000936  D050               	goto	l1711
   719                           
   720                           ;Lab4C.c: 102: unsigned char Numero = obtenerNumero(Tecla);
   721   000938  5014               	movf	_Tecla^0,w,c
   722   00093A  EC65  F007         	call	_obtenerNumero
   723   00093E  6E11               	movwf	main@Numero^0,c
   724                           
   725                           ;Lab4C.c: 104: if(Numero != 255) {
   726   000940  2811               	incf	main@Numero^0,w,c
   727   000942  B4D8               	btfsc	status,2,c
   728   000944  D00C               	goto	l1705
   729                           
   730                           ;Lab4C.c: 105: piezasAContar = piezasAContar*10 + Numero;
   731   000946  5013               	movf	_piezasAContar^0,w,c
   732   000948  0D0A               	mullw	10
   733   00094A  50F3               	movf	243,w,c
   734   00094C  2411               	addwf	main@Numero^0,w,c
   735   00094E  6E13               	movwf	_piezasAContar^0,c
   736                           
   737                           ;Lab4C.c: 106: EscribeLCD_n8(piezasAContar, 2);
   738   000950  0E02               	movlw	2
   739   000952  6E0A               	movwf	EscribeLCD_n8@b^0,c
   740   000954  5013               	movf	_piezasAContar^0,w,c
   741   000956  EC3B  F006         	call	_EscribeLCD_n8
   742                           
   743                           ;Lab4C.c: 107: regresiva = piezasAContar;
   744   00095A  C013  F012         	movff	_piezasAContar,_regresiva
   745   00095E                     l1705:
   746                           
   747                           ;Lab4C.c: 108: };Lab4C.c: 110: if(piezasAContar > 59) {
   748   00095E  0E3B               	movlw	59
   749   000960  6413               	cpfsgt	_piezasAContar^0,c
   750   000962  D7E0               	goto	l1689
   751                           
   752                           ;Lab4C.c: 111: piezasAContar = 0;
   753   000964  6A13               	clrf	_piezasAContar^0,c
   754                           
   755                           ;Lab4C.c: 112: BorraLCD();
   756   000966  EC58  F008         	call	_BorraLCD	;wreg free
   757                           
   758                           ;Lab4C.c: 113: DireccionaLCD(0x80);
   759   00096A  0E80               	movlw	128
   760   00096C  EC4D  F008         	call	_DireccionaLCD
   761                           
   762                           ;Lab4C.c: 114: EscribeLCD_c('P');
   763   000970  0E50               	movlw	80
   764   000972  EC42  F008         	call	_EscribeLCD_c
   765                           
   766                           ;Lab4C.c: 115: EscribeLCD_c('i');
   767   000976  0E69               	movlw	105
   768   000978  EC42  F008         	call	_EscribeLCD_c
   769                           
   770                           ;Lab4C.c: 116: EscribeLCD_c('e');
   771   00097C  0E65               	movlw	101
   772   00097E  EC42  F008         	call	_EscribeLCD_c
   773                           
   774                           ;Lab4C.c: 117: EscribeLCD_c('z');
   775   000982  0E7A               	movlw	122
   776   000984  EC42  F008         	call	_EscribeLCD_c
   777                           
   778                           ;Lab4C.c: 118: EscribeLCD_c('a');
   779   000988  0E61               	movlw	97
   780   00098A  EC42  F008         	call	_EscribeLCD_c
   781                           
   782                           ;Lab4C.c: 119: EscribeLCD_c('s');
   783   00098E  0E73               	movlw	115
   784   000990  EC42  F008         	call	_EscribeLCD_c
   785                           
   786                           ;Lab4C.c: 120: EscribeLCD_c(' ');
   787   000994  0E20               	movlw	32
   788   000996  EC42  F008         	call	_EscribeLCD_c
   789                           
   790                           ;Lab4C.c: 121: EscribeLCD_c('a');
   791   00099A  0E61               	movlw	97
   792   00099C  EC42  F008         	call	_EscribeLCD_c
   793                           
   794                           ;Lab4C.c: 122: EscribeLCD_c(' ');
   795   0009A0  0E20               	movlw	32
   796   0009A2  EC42  F008         	call	_EscribeLCD_c
   797                           
   798                           ;Lab4C.c: 123: EscribeLCD_c('c');
   799   0009A6  0E63               	movlw	99
   800   0009A8  EC42  F008         	call	_EscribeLCD_c
   801                           
   802                           ;Lab4C.c: 124: EscribeLCD_c('o');
   803   0009AC  0E6F               	movlw	111
   804   0009AE  EC42  F008         	call	_EscribeLCD_c
   805                           
   806                           ;Lab4C.c: 125: EscribeLCD_c('n');
   807   0009B2  0E6E               	movlw	110
   808   0009B4  EC42  F008         	call	_EscribeLCD_c
   809                           
   810                           ;Lab4C.c: 126: EscribeLCD_c('t');
   811   0009B8  0E74               	movlw	116
   812   0009BA  EC42  F008         	call	_EscribeLCD_c
   813                           
   814                           ;Lab4C.c: 127: EscribeLCD_c('a');
   815   0009BE  0E61               	movlw	97
   816   0009C0  EC42  F008         	call	_EscribeLCD_c
   817                           
   818                           ;Lab4C.c: 128: EscribeLCD_c('r');
   819   0009C4  0E72               	movlw	114
   820   0009C6  EC42  F008         	call	_EscribeLCD_c
   821                           
   822                           ;Lab4C.c: 129: EscribeLCD_c(':');
   823   0009CA  0E3A               	movlw	58
   824   0009CC  EC42  F008         	call	_EscribeLCD_c
   825                           
   826                           ;Lab4C.c: 130: EscribeLCD_c(' ');
   827   0009D0  0E20               	movlw	32
   828   0009D2  EC42  F008         	call	_EscribeLCD_c
   829   0009D6  D7A6               	goto	l1689
   830   0009D8                     l1711:
   831                           
   832                           ;Lab4C.c: 133: else if(Tecla == 13) {
   833   0009D8  0E0D               	movlw	13
   834   0009DA  1814               	xorwf	_Tecla^0,w,c
   835   0009DC  A4D8               	btfss	status,2,c
   836   0009DE  D07C               	goto	l1715
   837                           
   838                           ;Lab4C.c: 134: BorraLCD();
   839   0009E0  EC58  F008         	call	_BorraLCD	;wreg free
   840                           
   841                           ;Lab4C.c: 135: DireccionaLCD(0x80);
   842   0009E4  0E80               	movlw	128
   843   0009E6  EC4D  F008         	call	_DireccionaLCD
   844                           
   845                           ;Lab4C.c: 136: EscribeLCD_c('P');
   846   0009EA  0E50               	movlw	80
   847   0009EC  EC42  F008         	call	_EscribeLCD_c
   848                           
   849                           ;Lab4C.c: 137: EscribeLCD_c('i');
   850   0009F0  0E69               	movlw	105
   851   0009F2  EC42  F008         	call	_EscribeLCD_c
   852                           
   853                           ;Lab4C.c: 138: EscribeLCD_c('e');
   854   0009F6  0E65               	movlw	101
   855   0009F8  EC42  F008         	call	_EscribeLCD_c
   856                           
   857                           ;Lab4C.c: 139: EscribeLCD_c('z');
   858   0009FC  0E7A               	movlw	122
   859   0009FE  EC42  F008         	call	_EscribeLCD_c
   860                           
   861                           ;Lab4C.c: 140: EscribeLCD_c('a');
   862   000A02  0E61               	movlw	97
   863   000A04  EC42  F008         	call	_EscribeLCD_c
   864                           
   865                           ;Lab4C.c: 141: EscribeLCD_c('s');
   866   000A08  0E73               	movlw	115
   867   000A0A  EC42  F008         	call	_EscribeLCD_c
   868                           
   869                           ;Lab4C.c: 142: EscribeLCD_c(' ');
   870   000A0E  0E20               	movlw	32
   871   000A10  EC42  F008         	call	_EscribeLCD_c
   872                           
   873                           ;Lab4C.c: 143: EscribeLCD_c('f');
   874   000A14  0E66               	movlw	102
   875   000A16  EC42  F008         	call	_EscribeLCD_c
   876                           
   877                           ;Lab4C.c: 144: EscribeLCD_c('a');
   878   000A1A  0E61               	movlw	97
   879   000A1C  EC42  F008         	call	_EscribeLCD_c
   880                           
   881                           ;Lab4C.c: 145: EscribeLCD_c('l');
   882   000A20  0E6C               	movlw	108
   883   000A22  EC42  F008         	call	_EscribeLCD_c
   884                           
   885                           ;Lab4C.c: 146: EscribeLCD_c('t');
   886   000A26  0E74               	movlw	116
   887   000A28  EC42  F008         	call	_EscribeLCD_c
   888                           
   889                           ;Lab4C.c: 147: EscribeLCD_c('a');
   890   000A2C  0E61               	movlw	97
   891   000A2E  EC42  F008         	call	_EscribeLCD_c
   892                           
   893                           ;Lab4C.c: 148: EscribeLCD_c('n');
   894   000A32  0E6E               	movlw	110
   895   000A34  EC42  F008         	call	_EscribeLCD_c
   896                           
   897                           ;Lab4C.c: 149: EscribeLCD_c('t');
   898   000A38  0E74               	movlw	116
   899   000A3A  EC42  F008         	call	_EscribeLCD_c
   900                           
   901                           ;Lab4C.c: 150: EscribeLCD_c('e');
   902   000A3E  0E65               	movlw	101
   903   000A40  EC42  F008         	call	_EscribeLCD_c
   904                           
   905                           ;Lab4C.c: 151: EscribeLCD_c('s');
   906   000A44  0E73               	movlw	115
   907   000A46  EC42  F008         	call	_EscribeLCD_c
   908                           
   909                           ;Lab4C.c: 152: EscribeLCD_c(':');
   910   000A4A  0E3A               	movlw	58
   911   000A4C  EC42  F008         	call	_EscribeLCD_c
   912                           
   913                           ;Lab4C.c: 153: EscribeLCD_c(' ');
   914   000A50  0E20               	movlw	32
   915   000A52  EC42  F008         	call	_EscribeLCD_c
   916                           
   917                           ;Lab4C.c: 154: EscribeLCD_n8(regresiva, 2);
   918   000A56  0E02               	movlw	2
   919   000A58  6E0A               	movwf	EscribeLCD_n8@b^0,c
   920   000A5A  5012               	movf	_regresiva^0,w,c
   921   000A5C  EC3B  F006         	call	_EscribeLCD_n8
   922                           
   923                           ;Lab4C.c: 156: DireccionaLCD(0x94);
   924   000A60  0E94               	movlw	148
   925   000A62  EC4D  F008         	call	_DireccionaLCD
   926                           
   927                           ;Lab4C.c: 157: EscribeLCD_c('C');
   928   000A66  0E43               	movlw	67
   929   000A68  EC42  F008         	call	_EscribeLCD_c
   930                           
   931                           ;Lab4C.c: 158: EscribeLCD_c('u');
   932   000A6C  0E75               	movlw	117
   933   000A6E  EC42  F008         	call	_EscribeLCD_c
   934                           
   935                           ;Lab4C.c: 159: EscribeLCD_c('e');
   936   000A72  0E65               	movlw	101
   937   000A74  EC42  F008         	call	_EscribeLCD_c
   938                           
   939                           ;Lab4C.c: 160: EscribeLCD_c('n');
   940   000A78  0E6E               	movlw	110
   941   000A7A  EC42  F008         	call	_EscribeLCD_c
   942                           
   943                           ;Lab4C.c: 161: EscribeLCD_c('t');
   944   000A7E  0E74               	movlw	116
   945   000A80  EC42  F008         	call	_EscribeLCD_c
   946                           
   947                           ;Lab4C.c: 162: EscribeLCD_c('a');
   948   000A84  0E61               	movlw	97
   949   000A86  EC42  F008         	call	_EscribeLCD_c
   950                           
   951                           ;Lab4C.c: 163: EscribeLCD_c(' ');
   952   000A8A  0E20               	movlw	32
   953   000A8C  EC42  F008         	call	_EscribeLCD_c
   954                           
   955                           ;Lab4C.c: 164: EscribeLCD_c('o');
   956   000A90  0E6F               	movlw	111
   957   000A92  EC42  F008         	call	_EscribeLCD_c
   958                           
   959                           ;Lab4C.c: 165: EscribeLCD_c('b');
   960   000A96  0E62               	movlw	98
   961   000A98  EC42  F008         	call	_EscribeLCD_c
   962                           
   963                           ;Lab4C.c: 166: EscribeLCD_c('j');
   964   000A9C  0E6A               	movlw	106
   965   000A9E  EC42  F008         	call	_EscribeLCD_c
   966                           
   967                           ;Lab4C.c: 167: EscribeLCD_c('e');
   968   000AA2  0E65               	movlw	101
   969   000AA4  EC42  F008         	call	_EscribeLCD_c
   970                           
   971                           ;Lab4C.c: 168: EscribeLCD_c('t');
   972   000AA8  0E74               	movlw	116
   973   000AAA  EC42  F008         	call	_EscribeLCD_c
   974                           
   975                           ;Lab4C.c: 169: EscribeLCD_c('i');
   976   000AAE  0E69               	movlw	105
   977   000AB0  EC42  F008         	call	_EscribeLCD_c
   978                           
   979                           ;Lab4C.c: 170: EscribeLCD_c('v');
   980   000AB4  0E76               	movlw	118
   981   000AB6  EC42  F008         	call	_EscribeLCD_c
   982                           
   983                           ;Lab4C.c: 171: EscribeLCD_c('o');
   984   000ABA  0E6F               	movlw	111
   985   000ABC  EC42  F008         	call	_EscribeLCD_c
   986                           
   987                           ;Lab4C.c: 172: EscribeLCD_c(':');
   988   000AC0  0E3A               	movlw	58
   989   000AC2  EC42  F008         	call	_EscribeLCD_c
   990                           
   991                           ;Lab4C.c: 173: EscribeLCD_c(' ');
   992   000AC6  0E20               	movlw	32
   993   000AC8  EC42  F008         	call	_EscribeLCD_c
   994                           
   995                           ;Lab4C.c: 174: EscribeLCD_n8(piezasAContar, 2);
   996   000ACC  0E02               	movlw	2
   997   000ACE  6E0A               	movwf	EscribeLCD_n8@b^0,c
   998   000AD0  5013               	movf	_piezasAContar^0,w,c
   999   000AD2  EC3B  F006         	call	_EscribeLCD_n8
  1000                           
  1001                           ;Lab4C.c: 175: }
  1002   000AD6  D726               	goto	l1689
  1003   000AD8                     l1715:
  1004                           
  1005                           ;Lab4C.c: 176: else if(Tecla == 4 && regresiva != 0) {
  1006   000AD8  0E04               	movlw	4
  1007   000ADA  1814               	xorwf	_Tecla^0,w,c
  1008   000ADC  A4D8               	btfss	status,2,c
  1009   000ADE  D080               	goto	l1801
  1010   000AE0  5012               	movf	_regresiva^0,w,c
  1011   000AE2  B4D8               	btfsc	status,2,c
  1012   000AE4  D07D               	goto	l1801
  1013                           
  1014                           ;Lab4C.c: 177: regresiva--;
  1015   000AE6  0612               	decf	_regresiva^0,f,c
  1016                           
  1017                           ;Lab4C.c: 178: BorraLCD();
  1018   000AE8  EC58  F008         	call	_BorraLCD	;wreg free
  1019                           
  1020                           ;Lab4C.c: 179: DireccionaLCD(0x80);
  1021   000AEC  0E80               	movlw	128
  1022   000AEE  EC4D  F008         	call	_DireccionaLCD
  1023                           
  1024                           ;Lab4C.c: 180: EscribeLCD_c('P');
  1025   000AF2  0E50               	movlw	80
  1026   000AF4  EC42  F008         	call	_EscribeLCD_c
  1027                           
  1028                           ;Lab4C.c: 181: EscribeLCD_c('i');
  1029   000AF8  0E69               	movlw	105
  1030   000AFA  EC42  F008         	call	_EscribeLCD_c
  1031                           
  1032                           ;Lab4C.c: 182: EscribeLCD_c('e');
  1033   000AFE  0E65               	movlw	101
  1034   000B00  EC42  F008         	call	_EscribeLCD_c
  1035                           
  1036                           ;Lab4C.c: 183: EscribeLCD_c('z');
  1037   000B04  0E7A               	movlw	122
  1038   000B06  EC42  F008         	call	_EscribeLCD_c
  1039                           
  1040                           ;Lab4C.c: 184: EscribeLCD_c('a');
  1041   000B0A  0E61               	movlw	97
  1042   000B0C  EC42  F008         	call	_EscribeLCD_c
  1043                           
  1044                           ;Lab4C.c: 185: EscribeLCD_c('s');
  1045   000B10  0E73               	movlw	115
  1046   000B12  EC42  F008         	call	_EscribeLCD_c
  1047                           
  1048                           ;Lab4C.c: 186: EscribeLCD_c(' ');
  1049   000B16  0E20               	movlw	32
  1050   000B18  EC42  F008         	call	_EscribeLCD_c
  1051                           
  1052                           ;Lab4C.c: 187: EscribeLCD_c('f');
  1053   000B1C  0E66               	movlw	102
  1054   000B1E  EC42  F008         	call	_EscribeLCD_c
  1055                           
  1056                           ;Lab4C.c: 188: EscribeLCD_c('a');
  1057   000B22  0E61               	movlw	97
  1058   000B24  EC42  F008         	call	_EscribeLCD_c
  1059                           
  1060                           ;Lab4C.c: 189: EscribeLCD_c('l');
  1061   000B28  0E6C               	movlw	108
  1062   000B2A  EC42  F008         	call	_EscribeLCD_c
  1063                           
  1064                           ;Lab4C.c: 190: EscribeLCD_c('t');
  1065   000B2E  0E74               	movlw	116
  1066   000B30  EC42  F008         	call	_EscribeLCD_c
  1067                           
  1068                           ;Lab4C.c: 191: EscribeLCD_c('a');
  1069   000B34  0E61               	movlw	97
  1070   000B36  EC42  F008         	call	_EscribeLCD_c
  1071                           
  1072                           ;Lab4C.c: 192: EscribeLCD_c('n');
  1073   000B3A  0E6E               	movlw	110
  1074   000B3C  EC42  F008         	call	_EscribeLCD_c
  1075                           
  1076                           ;Lab4C.c: 193: EscribeLCD_c('t');
  1077   000B40  0E74               	movlw	116
  1078   000B42  EC42  F008         	call	_EscribeLCD_c
  1079                           
  1080                           ;Lab4C.c: 194: EscribeLCD_c('e');
  1081   000B46  0E65               	movlw	101
  1082   000B48  EC42  F008         	call	_EscribeLCD_c
  1083                           
  1084                           ;Lab4C.c: 195: EscribeLCD_c('s');
  1085   000B4C  0E73               	movlw	115
  1086   000B4E  EC42  F008         	call	_EscribeLCD_c
  1087                           
  1088                           ;Lab4C.c: 196: EscribeLCD_c(':');
  1089   000B52  0E3A               	movlw	58
  1090   000B54  EC42  F008         	call	_EscribeLCD_c
  1091                           
  1092                           ;Lab4C.c: 197: EscribeLCD_c(' ');
  1093   000B58  0E20               	movlw	32
  1094   000B5A  EC42  F008         	call	_EscribeLCD_c
  1095                           
  1096                           ;Lab4C.c: 198: EscribeLCD_n8(regresiva, 2);
  1097   000B5E  0E02               	movlw	2
  1098   000B60  6E0A               	movwf	EscribeLCD_n8@b^0,c
  1099   000B62  5012               	movf	_regresiva^0,w,c
  1100   000B64  EC3B  F006         	call	_EscribeLCD_n8
  1101                           
  1102                           ;Lab4C.c: 200: DireccionaLCD(0x94);
  1103   000B68  0E94               	movlw	148
  1104   000B6A  EC4D  F008         	call	_DireccionaLCD
  1105                           
  1106                           ;Lab4C.c: 201: EscribeLCD_c('C');
  1107   000B6E  0E43               	movlw	67
  1108   000B70  EC42  F008         	call	_EscribeLCD_c
  1109                           
  1110                           ;Lab4C.c: 202: EscribeLCD_c('u');
  1111   000B74  0E75               	movlw	117
  1112   000B76  EC42  F008         	call	_EscribeLCD_c
  1113                           
  1114                           ;Lab4C.c: 203: EscribeLCD_c('e');
  1115   000B7A  0E65               	movlw	101
  1116   000B7C  EC42  F008         	call	_EscribeLCD_c
  1117                           
  1118                           ;Lab4C.c: 204: EscribeLCD_c('n');
  1119   000B80  0E6E               	movlw	110
  1120   000B82  EC42  F008         	call	_EscribeLCD_c
  1121                           
  1122                           ;Lab4C.c: 205: EscribeLCD_c('t');
  1123   000B86  0E74               	movlw	116
  1124   000B88  EC42  F008         	call	_EscribeLCD_c
  1125                           
  1126                           ;Lab4C.c: 206: EscribeLCD_c('a');
  1127   000B8C  0E61               	movlw	97
  1128   000B8E  EC42  F008         	call	_EscribeLCD_c
  1129                           
  1130                           ;Lab4C.c: 207: EscribeLCD_c(' ');
  1131   000B92  0E20               	movlw	32
  1132   000B94  EC42  F008         	call	_EscribeLCD_c
  1133                           
  1134                           ;Lab4C.c: 208: EscribeLCD_c('o');
  1135   000B98  0E6F               	movlw	111
  1136   000B9A  EC42  F008         	call	_EscribeLCD_c
  1137                           
  1138                           ;Lab4C.c: 209: EscribeLCD_c('b');
  1139   000B9E  0E62               	movlw	98
  1140   000BA0  EC42  F008         	call	_EscribeLCD_c
  1141                           
  1142                           ;Lab4C.c: 210: EscribeLCD_c('j');
  1143   000BA4  0E6A               	movlw	106
  1144   000BA6  EC42  F008         	call	_EscribeLCD_c
  1145                           
  1146                           ;Lab4C.c: 211: EscribeLCD_c('e');
  1147   000BAA  0E65               	movlw	101
  1148   000BAC  EC42  F008         	call	_EscribeLCD_c
  1149                           
  1150                           ;Lab4C.c: 212: EscribeLCD_c('t');
  1151   000BB0  0E74               	movlw	116
  1152   000BB2  EC42  F008         	call	_EscribeLCD_c
  1153                           
  1154                           ;Lab4C.c: 213: EscribeLCD_c('i');
  1155   000BB6  0E69               	movlw	105
  1156   000BB8  EC42  F008         	call	_EscribeLCD_c
  1157                           
  1158                           ;Lab4C.c: 214: EscribeLCD_c('v');
  1159   000BBC  0E76               	movlw	118
  1160   000BBE  EC42  F008         	call	_EscribeLCD_c
  1161                           
  1162                           ;Lab4C.c: 215: EscribeLCD_c('o');
  1163   000BC2  0E6F               	movlw	111
  1164   000BC4  EC42  F008         	call	_EscribeLCD_c
  1165                           
  1166                           ;Lab4C.c: 216: EscribeLCD_c(':');
  1167   000BC8  0E3A               	movlw	58
  1168   000BCA  EC42  F008         	call	_EscribeLCD_c
  1169                           
  1170                           ;Lab4C.c: 217: EscribeLCD_c(' ');
  1171   000BCE  0E20               	movlw	32
  1172   000BD0  EC42  F008         	call	_EscribeLCD_c
  1173                           
  1174                           ;Lab4C.c: 218: EscribeLCD_n8(piezasAContar, 2);
  1175   000BD4  0E02               	movlw	2
  1176   000BD6  6E0A               	movwf	EscribeLCD_n8@b^0,c
  1177   000BD8  5013               	movf	_piezasAContar^0,w,c
  1178   000BDA  EC3B  F006         	call	_EscribeLCD_n8
  1179                           
  1180                           ;Lab4C.c: 219: }
  1181   000BDE  D6A2               	goto	l1689
  1182   000BE0                     l1801:
  1183                           
  1184                           ;Lab4C.c: 220: else if(Tecla == 4 && regresiva == 0) {
  1185   000BE0  0E04               	movlw	4
  1186   000BE2  1814               	xorwf	_Tecla^0,w,c
  1187   000BE4  A4D8               	btfss	status,2,c
  1188   000BE6  D69E               	goto	l1689
  1189   000BE8  5012               	movf	_regresiva^0,w,c
  1190   000BEA  A4D8               	btfss	status,2,c
  1191   000BEC  D69B               	goto	l1689
  1192                           
  1193                           ;Lab4C.c: 221: BorraLCD();
  1194   000BEE  EC58  F008         	call	_BorraLCD	;wreg free
  1195                           
  1196                           ;Lab4C.c: 222: DireccionaLCD(0x80);
  1197   000BF2  0E80               	movlw	128
  1198   000BF4  EC4D  F008         	call	_DireccionaLCD
  1199                           
  1200                           ;Lab4C.c: 223: EscribeLCD_c('C');
  1201   000BF8  0E43               	movlw	67
  1202   000BFA  EC42  F008         	call	_EscribeLCD_c
  1203                           
  1204                           ;Lab4C.c: 224: EscribeLCD_c('u');
  1205   000BFE  0E75               	movlw	117
  1206   000C00  EC42  F008         	call	_EscribeLCD_c
  1207                           
  1208                           ;Lab4C.c: 225: EscribeLCD_c('e');
  1209   000C04  0E65               	movlw	101
  1210   000C06  EC42  F008         	call	_EscribeLCD_c
  1211                           
  1212                           ;Lab4C.c: 226: EscribeLCD_c('n');
  1213   000C0A  0E6E               	movlw	110
  1214   000C0C  EC42  F008         	call	_EscribeLCD_c
  1215                           
  1216                           ;Lab4C.c: 227: EscribeLCD_c('t');
  1217   000C10  0E74               	movlw	116
  1218   000C12  EC42  F008         	call	_EscribeLCD_c
  1219                           
  1220                           ;Lab4C.c: 228: EscribeLCD_c('a');
  1221   000C16  0E61               	movlw	97
  1222   000C18  EC42  F008         	call	_EscribeLCD_c
  1223                           
  1224                           ;Lab4C.c: 229: EscribeLCD_c(' ');
  1225   000C1C  0E20               	movlw	32
  1226   000C1E  EC42  F008         	call	_EscribeLCD_c
  1227                           
  1228                           ;Lab4C.c: 230: EscribeLCD_c('f');
  1229   000C22  0E66               	movlw	102
  1230   000C24  EC42  F008         	call	_EscribeLCD_c
  1231                           
  1232                           ;Lab4C.c: 231: EscribeLCD_c('i');
  1233   000C28  0E69               	movlw	105
  1234   000C2A  EC42  F008         	call	_EscribeLCD_c
  1235                           
  1236                           ;Lab4C.c: 232: EscribeLCD_c('n');
  1237   000C2E  0E6E               	movlw	110
  1238   000C30  EC42  F008         	call	_EscribeLCD_c
  1239                           
  1240                           ;Lab4C.c: 233: EscribeLCD_c('a');
  1241   000C34  0E61               	movlw	97
  1242   000C36  EC42  F008         	call	_EscribeLCD_c
  1243                           
  1244                           ;Lab4C.c: 234: EscribeLCD_c('l');
  1245   000C3A  0E6C               	movlw	108
  1246   000C3C  EC42  F008         	call	_EscribeLCD_c
  1247                           
  1248                           ;Lab4C.c: 235: EscribeLCD_c('i');
  1249   000C40  0E69               	movlw	105
  1250   000C42  EC42  F008         	call	_EscribeLCD_c
  1251                           
  1252                           ;Lab4C.c: 236: EscribeLCD_c('z');
  1253   000C46  0E7A               	movlw	122
  1254   000C48  EC42  F008         	call	_EscribeLCD_c
  1255                           
  1256                           ;Lab4C.c: 237: EscribeLCD_c('a');
  1257   000C4C  0E61               	movlw	97
  1258   000C4E  EC42  F008         	call	_EscribeLCD_c
  1259                           
  1260                           ;Lab4C.c: 238: EscribeLCD_c('d');
  1261   000C52  0E64               	movlw	100
  1262   000C54  EC42  F008         	call	_EscribeLCD_c
  1263                           
  1264                           ;Lab4C.c: 239: EscribeLCD_c('a');
  1265   000C58  0E61               	movlw	97
  1266   000C5A  EC42  F008         	call	_EscribeLCD_c
  1267                           
  1268                           ;Lab4C.c: 240: _delay((unsigned long)((5000)*(1000000/4000.0)));
  1269   000C5E  0E07               	movlw	7
  1270   000C60  6E10               	movwf	(??_main+1)^0,c
  1271   000C62  0E58               	movlw	88
  1272   000C64  6E0F               	movwf	??_main^0,c
  1273   000C66  0E5A               	movlw	90
  1274   000C68                     u617:
  1275   000C68  2EE8               	decfsz	wreg,f,c
  1276   000C6A  D7FE               	bra	u617
  1277   000C6C  2E0F               	decfsz	??_main^0,f,c
  1278   000C6E  D7FC               	bra	u617
  1279   000C70  2E10               	decfsz	(??_main+1)^0,f,c
  1280   000C72  D7FA               	bra	u617
  1281   000C74  D657               	goto	l1689
  1282   000C76                     __end_of_main:
  1283                           	callstack 0
  1284                           
  1285 ;; *************** function _obtenerNumero *****************
  1286 ;; Defined at:
  1287 ;;		line 17 in file "Lab4C.c"
  1288 ;; Parameters:    Size  Location     Type
  1289 ;;  tecla           1    wreg     unsigned char 
  1290 ;; Auto vars:     Size  Location     Type
  1291 ;;  tecla           1    1[COMRAM] unsigned char 
  1292 ;; Return value:  Size  Location     Type
  1293 ;;                  1    wreg      unsigned char 
  1294 ;; Registers used:
  1295 ;;		wreg, status,2, status,0
  1296 ;; Tracked objects:
  1297 ;;		On entry : 0/0
  1298 ;;		On exit  : 0/0
  1299 ;;		Unchanged: 0/0
  1300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1301 ;;      Params:         0       0       0       0       0       0       0       0       0
  1302 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1303 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1304 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1305 ;;Total ram usage:        1 bytes
  1306 ;; Hardware stack levels used: 1
  1307 ;; Hardware stack levels required when called: 1
  1308 ;; This function calls:
  1309 ;;		Nothing
  1310 ;; This function is called by:
  1311 ;;		_main
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           	psect	text1
  1316   000ECA                     __ptext1:
  1317                           	callstack 0
  1318   000ECA                     _obtenerNumero:
  1319                           	callstack 29
  1320                           
  1321                           ;incstack = 0
  1322                           ;obtenerNumero@tecla stored from wreg
  1323   000ECA  6E02               	movwf	obtenerNumero@tecla^0,c
  1324                           
  1325                           ;Lab4C.c: 18: switch(tecla) {
  1326   000ECC  D016               	goto	l1233
  1327   000ECE                     l1187:
  1328   000ECE  0E01               	movlw	1
  1329   000ED0  0012               	return	
  1330   000ED2                     l1191:
  1331   000ED2  0E04               	movlw	4
  1332   000ED4  0012               	return	
  1333   000ED6                     l1195:
  1334   000ED6  0E07               	movlw	7
  1335   000ED8  0012               	return	
  1336   000EDA                     l1199:
  1337   000EDA  0E02               	movlw	2
  1338   000EDC  0012               	return	
  1339   000EDE                     l1203:
  1340   000EDE  0E05               	movlw	5
  1341   000EE0  0012               	return	
  1342   000EE2                     l1207:
  1343   000EE2  0E08               	movlw	8
  1344   000EE4  0012               	return	
  1345   000EE6                     l1211:
  1346   000EE6  0E00               	movlw	0
  1347   000EE8  0012               	return	
  1348   000EEA                     l1215:
  1349   000EEA  0E03               	movlw	3
  1350   000EEC  0012               	return	
  1351   000EEE                     l1219:
  1352   000EEE  0E06               	movlw	6
  1353   000EF0  0012               	return	
  1354   000EF2                     l1223:
  1355   000EF2  0E09               	movlw	9
  1356   000EF4  0012               	return	
  1357   000EF6                     l1227:
  1358   000EF6  0EFF               	movlw	255
  1359   000EF8  0012               	return	
  1360   000EFA                     l1233:
  1361   000EFA  5002               	movf	obtenerNumero@tecla^0,w,c
  1362                           
  1363                           ; Switch size 1, requested type "simple"
  1364                           ; Number of cases is 10, Range of values is 1 to 11
  1365                           ; switch strategies available:
  1366                           ; Name         Instructions Cycles
  1367                           ; simple_byte           31    16 (average)
  1368                           ;	Chosen strategy is simple_byte
  1369   000EFC  0A01               	xorlw	1	; case 1
  1370   000EFE  B4D8               	btfsc	status,2,c
  1371   000F00  D7E6               	goto	l1187
  1372   000F02  0A03               	xorlw	3	; case 2
  1373   000F04  B4D8               	btfsc	status,2,c
  1374   000F06  D7E5               	goto	l1191
  1375   000F08  0A01               	xorlw	1	; case 3
  1376   000F0A  B4D8               	btfsc	status,2,c
  1377   000F0C  D7E4               	goto	l1195
  1378   000F0E  0A06               	xorlw	6	; case 5
  1379   000F10  B4D8               	btfsc	status,2,c
  1380   000F12  D7E3               	goto	l1199
  1381   000F14  0A03               	xorlw	3	; case 6
  1382   000F16  B4D8               	btfsc	status,2,c
  1383   000F18  D7E2               	goto	l1203
  1384   000F1A  0A01               	xorlw	1	; case 7
  1385   000F1C  B4D8               	btfsc	status,2,c
  1386   000F1E  D7E1               	goto	l1207
  1387   000F20  0A0F               	xorlw	15	; case 8
  1388   000F22  B4D8               	btfsc	status,2,c
  1389   000F24  D7E0               	goto	l1211
  1390   000F26  0A01               	xorlw	1	; case 9
  1391   000F28  B4D8               	btfsc	status,2,c
  1392   000F2A  D7DF               	goto	l1215
  1393   000F2C  0A03               	xorlw	3	; case 10
  1394   000F2E  B4D8               	btfsc	status,2,c
  1395   000F30  D7DE               	goto	l1219
  1396   000F32  0A01               	xorlw	1	; case 11
  1397   000F34  B4D8               	btfsc	status,2,c
  1398   000F36  D7DD               	goto	l1223
  1399   000F38  D7DE               	goto	l1227
  1400   000F3A                     __end_of_obtenerNumero:
  1401                           	callstack 0
  1402                           
  1403 ;; *************** function _InicializaLCD *****************
  1404 ;; Defined at:
  1405 ;;		line 71 in file "LibLCDXC8.h"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;		None
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;		None
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  1    wreg      void 
  1412 ;; Registers used:
  1413 ;;		wreg, status,2, status,0, cstack
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 0/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1419 ;;      Params:         0       0       0       0       0       0       0       0       0
  1420 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1421 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1422 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1423 ;;Total ram usage:        0 bytes
  1424 ;; Hardware stack levels used: 1
  1425 ;; Hardware stack levels required when called: 4
  1426 ;; This function calls:
  1427 ;;		_BorraLCD
  1428 ;;		_EnviaDato
  1429 ;;		_HabilitaLCD
  1430 ;;		_RetardoLCD
  1431 ;; This function is called by:
  1432 ;;		_main
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           	psect	text2
  1437   000E2E                     __ptext2:
  1438                           	callstack 0
  1439   000E2E                     _InicializaLCD:
  1440                           	callstack 26
  1441                           
  1442                           ;LibLCDXC8.h: 73: LATD0=0;
  1443                           
  1444                           ;incstack = 0
  1445   000E2E  908C               	bcf	3980,0,c	;volatile
  1446                           
  1447                           ;LibLCDXC8.h: 74: if(interfaz==4)
  1448   000E30  0E04               	movlw	4
  1449   000E32  1815               	xorwf	_interfaz^0,w,c
  1450   000E34  A4D8               	btfss	status,2,c
  1451   000E36  D004               	goto	l1085
  1452                           
  1453                           ;LibLCDXC8.h: 75: LATD=(LATD & 0b00001111) | 0x30;
  1454   000E38  508C               	movf	140,w,c	;volatile
  1455   000E3A  0B0F               	andlw	15
  1456   000E3C  0930               	iorlw	48
  1457   000E3E  D001               	goto	L1
  1458   000E40                     l1085:
  1459                           
  1460                           ;LibLCDXC8.h: 76: else;LibLCDXC8.h: 77: LATD=0x3F;
  1461   000E40  0E3F               	movlw	63
  1462   000E42                     L1:
  1463   000E42  6E8C               	movwf	140,c	;volatile
  1464                           
  1465                           ;LibLCDXC8.h: 78: HabilitaLCD();
  1466   000E44  EC62  F008         	call	_HabilitaLCD	;wreg free
  1467                           
  1468                           ;LibLCDXC8.h: 79: RetardoLCD(1);
  1469   000E48  0E01               	movlw	1
  1470   000E4A  EC9D  F007         	call	_RetardoLCD
  1471                           
  1472                           ;LibLCDXC8.h: 80: if(interfaz==4)
  1473   000E4E  0E04               	movlw	4
  1474   000E50  1815               	xorwf	_interfaz^0,w,c
  1475   000E52  A4D8               	btfss	status,2,c
  1476   000E54  D004               	goto	l1095
  1477                           
  1478                           ;LibLCDXC8.h: 81: LATD=(LATD & 0b00001111) | 0x30;
  1479   000E56  508C               	movf	140,w,c	;volatile
  1480   000E58  0B0F               	andlw	15
  1481   000E5A  0930               	iorlw	48
  1482   000E5C  D001               	goto	L2
  1483   000E5E                     l1095:
  1484                           
  1485                           ;LibLCDXC8.h: 82: else;LibLCDXC8.h: 83: LATD=0x3F;
  1486   000E5E  0E3F               	movlw	63
  1487   000E60                     L2:
  1488   000E60  6E8C               	movwf	140,c	;volatile
  1489                           
  1490                           ;LibLCDXC8.h: 84: HabilitaLCD();
  1491   000E62  EC62  F008         	call	_HabilitaLCD	;wreg free
  1492                           
  1493                           ;LibLCDXC8.h: 85: RetardoLCD(3);
  1494   000E66  0E03               	movlw	3
  1495   000E68  EC9D  F007         	call	_RetardoLCD
  1496                           
  1497                           ;LibLCDXC8.h: 86: if(interfaz==4)
  1498   000E6C  0E04               	movlw	4
  1499   000E6E  1815               	xorwf	_interfaz^0,w,c
  1500   000E70  A4D8               	btfss	status,2,c
  1501   000E72  D004               	goto	l1105
  1502                           
  1503                           ;LibLCDXC8.h: 87: LATD=(LATD & 0b00001111) | 0x30;
  1504   000E74  508C               	movf	140,w,c	;volatile
  1505   000E76  0B0F               	andlw	15
  1506   000E78  0930               	iorlw	48
  1507   000E7A  D001               	goto	L3
  1508   000E7C                     l1105:
  1509                           
  1510                           ;LibLCDXC8.h: 88: else;LibLCDXC8.h: 89: LATD=0x3F;
  1511   000E7C  0E3F               	movlw	63
  1512   000E7E                     L3:
  1513   000E7E  6E8C               	movwf	140,c	;volatile
  1514                           
  1515                           ;LibLCDXC8.h: 90: HabilitaLCD();
  1516   000E80  EC62  F008         	call	_HabilitaLCD	;wreg free
  1517                           
  1518                           ;LibLCDXC8.h: 91: RetardoLCD(4);
  1519   000E84  0E04               	movlw	4
  1520   000E86  EC9D  F007         	call	_RetardoLCD
  1521                           
  1522                           ;LibLCDXC8.h: 92: if(interfaz==4){
  1523   000E8A  0E04               	movlw	4
  1524   000E8C  1815               	xorwf	_interfaz^0,w,c
  1525   000E8E  A4D8               	btfss	status,2,c
  1526   000E90  D011               	goto	l1125
  1527                           
  1528                           ;LibLCDXC8.h: 93: LATD=(LATD & 0b00001111) | 0x20;
  1529   000E92  508C               	movf	140,w,c	;volatile
  1530   000E94  0B0F               	andlw	15
  1531   000E96  0920               	iorlw	32
  1532   000E98  6E8C               	movwf	140,c	;volatile
  1533                           
  1534                           ;LibLCDXC8.h: 94: HabilitaLCD();
  1535   000E9A  EC62  F008         	call	_HabilitaLCD	;wreg free
  1536                           
  1537                           ;LibLCDXC8.h: 95: RetardoLCD(4);
  1538   000E9E  0E04               	movlw	4
  1539   000EA0  EC9D  F007         	call	_RetardoLCD
  1540                           
  1541                           ;LibLCDXC8.h: 96: EnviaDato(0x2F);
  1542   000EA4  0E2F               	movlw	47
  1543   000EA6  ECD0  F007         	call	_EnviaDato
  1544                           
  1545                           ;LibLCDXC8.h: 97: HabilitaLCD();
  1546   000EAA  EC62  F008         	call	_HabilitaLCD	;wreg free
  1547                           
  1548                           ;LibLCDXC8.h: 98: RetardoLCD(4);
  1549   000EAE  0E04               	movlw	4
  1550   000EB0  EC9D  F007         	call	_RetardoLCD
  1551   000EB4                     l1125:
  1552                           
  1553                           ;LibLCDXC8.h: 99: };LibLCDXC8.h: 100: BorraLCD();
  1554   000EB4  EC58  F008         	call	_BorraLCD	;wreg free
  1555                           
  1556                           ;LibLCDXC8.h: 101: EnviaDato(0xF);
  1557   000EB8  0E0F               	movlw	15
  1558   000EBA  ECD0  F007         	call	_EnviaDato
  1559                           
  1560                           ;LibLCDXC8.h: 102: HabilitaLCD();
  1561   000EBE  EC62  F008         	call	_HabilitaLCD	;wreg free
  1562                           
  1563                           ;LibLCDXC8.h: 103: RetardoLCD(4);
  1564   000EC2  0E04               	movlw	4
  1565   000EC4  EC9D  F007         	call	_RetardoLCD
  1566   000EC8  0012               	return		;funcret
  1567   000ECA                     __end_of_InicializaLCD:
  1568                           	callstack 0
  1569                           
  1570 ;; *************** function _BorraLCD *****************
  1571 ;; Defined at:
  1572 ;;		line 112 in file "LibLCDXC8.h"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;		None
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;		None
  1577 ;; Return value:  Size  Location     Type
  1578 ;;                  1    wreg      void 
  1579 ;; Registers used:
  1580 ;;		wreg, status,2, status,0, cstack
  1581 ;; Tracked objects:
  1582 ;;		On entry : 0/0
  1583 ;;		On exit  : 0/0
  1584 ;;		Unchanged: 0/0
  1585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1586 ;;      Params:         0       0       0       0       0       0       0       0       0
  1587 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1588 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1589 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1590 ;;Total ram usage:        0 bytes
  1591 ;; Hardware stack levels used: 1
  1592 ;; Hardware stack levels required when called: 3
  1593 ;; This function calls:
  1594 ;;		_EnviaDato
  1595 ;;		_HabilitaLCD
  1596 ;;		_RetardoLCD
  1597 ;; This function is called by:
  1598 ;;		_InicializaLCD
  1599 ;;		_main
  1600 ;; This function uses a non-reentrant model
  1601 ;;
  1602                           
  1603                           	psect	text3
  1604   0010B0                     __ptext3:
  1605                           	callstack 0
  1606   0010B0                     _BorraLCD:
  1607                           	callstack 26
  1608                           
  1609                           ;LibLCDXC8.h: 114: LATD0=0;
  1610                           
  1611                           ;incstack = 0
  1612   0010B0  908C               	bcf	3980,0,c	;volatile
  1613                           
  1614                           ;LibLCDXC8.h: 115: EnviaDato(0x01);
  1615   0010B2  0E01               	movlw	1
  1616   0010B4  ECD0  F007         	call	_EnviaDato
  1617                           
  1618                           ;LibLCDXC8.h: 116: HabilitaLCD();
  1619   0010B8  EC62  F008         	call	_HabilitaLCD	;wreg free
  1620                           
  1621                           ;LibLCDXC8.h: 117: RetardoLCD(2);
  1622   0010BC  0E02               	movlw	2
  1623   0010BE  EC9D  F007         	call	_RetardoLCD
  1624   0010C2  0012               	return		;funcret
  1625   0010C4                     __end_of_BorraLCD:
  1626                           	callstack 0
  1627                           
  1628 ;; *************** function _EscribeLCD_n8 *****************
  1629 ;; Defined at:
  1630 ;;		line 145 in file "LibLCDXC8.h"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;  a               1    wreg     unsigned char 
  1633 ;;  b               1    9[COMRAM] unsigned char 
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;  a               1   13[COMRAM] unsigned char 
  1636 ;;  unidad          1   12[COMRAM] unsigned char 
  1637 ;;  decena          1   11[COMRAM] unsigned char 
  1638 ;;  centena         1   10[COMRAM] unsigned char 
  1639 ;; Return value:  Size  Location     Type
  1640 ;;                  1    wreg      void 
  1641 ;; Registers used:
  1642 ;;		wreg, status,2, status,0, cstack
  1643 ;; Tracked objects:
  1644 ;;		On entry : 0/0
  1645 ;;		On exit  : 0/0
  1646 ;;		Unchanged: 0/0
  1647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1648 ;;      Params:         1       0       0       0       0       0       0       0       0
  1649 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1650 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1651 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1652 ;;Total ram usage:        5 bytes
  1653 ;; Hardware stack levels used: 1
  1654 ;; Hardware stack levels required when called: 3
  1655 ;; This function calls:
  1656 ;;		_EnviaDato
  1657 ;;		_HabilitaLCD
  1658 ;;		_RetardoLCD
  1659 ;;		___lbdiv
  1660 ;;		___lbmod
  1661 ;; This function is called by:
  1662 ;;		_main
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text4
  1667   000C76                     __ptext4:
  1668                           	callstack 0
  1669   000C76                     _EscribeLCD_n8:
  1670                           	callstack 27
  1671                           
  1672                           ;incstack = 0
  1673                           ;EscribeLCD_n8@a stored from wreg
  1674   000C76  6E0E               	movwf	EscribeLCD_n8@a^0,c
  1675                           
  1676                           ;LibLCDXC8.h: 150: unsigned char centena,decena,unidad;;LibLCDXC8.h: 151: LATD0=1;
  1677   000C78  808C               	bsf	3980,0,c	;volatile
  1678                           
  1679                           ;LibLCDXC8.h: 152: switch(b){
  1680   000C7A  D065               	goto	l1593
  1681   000C7C                     l1561:
  1682   000C7C  0E0A               	movlw	10
  1683   000C7E  6E02               	movwf	___lbmod@divisor^0,c
  1684   000C80  500E               	movf	EscribeLCD_n8@a^0,w,c
  1685   000C82  EC0F  F008         	call	___lbmod
  1686   000C86  6E0D               	movwf	EscribeLCD_n8@unidad^0,c
  1687                           
  1688                           ;LibLCDXC8.h: 154: EnviaDato(unidad+48);
  1689   000C88  500D               	movf	EscribeLCD_n8@unidad^0,w,c
  1690   000C8A  0F30               	addlw	48
  1691   000C8C  ECD0  F007         	call	_EnviaDato
  1692                           
  1693                           ;LibLCDXC8.h: 155: HabilitaLCD();
  1694   000C90  EC62  F008         	call	_HabilitaLCD	;wreg free
  1695                           
  1696                           ;LibLCDXC8.h: 156: RetardoLCD(4);
  1697   000C94  0E04               	movlw	4
  1698   000C96  EC9D  F007         	call	_RetardoLCD
  1699                           
  1700                           ;LibLCDXC8.h: 157: break;
  1701   000C9A  0012               	return	
  1702   000C9C                     l1567:
  1703   000C9C  0E0A               	movlw	10
  1704   000C9E  6E06               	movwf	___lbdiv@divisor^0,c
  1705   000CA0  0E64               	movlw	100
  1706   000CA2  6E02               	movwf	___lbmod@divisor^0,c
  1707   000CA4  500E               	movf	EscribeLCD_n8@a^0,w,c
  1708   000CA6  EC0F  F008         	call	___lbmod
  1709   000CAA  ECF3  F007         	call	___lbdiv
  1710   000CAE  6E0C               	movwf	EscribeLCD_n8@decena^0,c
  1711                           
  1712                           ;LibLCDXC8.h: 159: unidad=a%10;
  1713   000CB0  0E0A               	movlw	10
  1714   000CB2  6E02               	movwf	___lbmod@divisor^0,c
  1715   000CB4  500E               	movf	EscribeLCD_n8@a^0,w,c
  1716   000CB6  EC0F  F008         	call	___lbmod
  1717   000CBA  6E0D               	movwf	EscribeLCD_n8@unidad^0,c
  1718                           
  1719                           ;LibLCDXC8.h: 160: EnviaDato(decena+48);
  1720   000CBC  500C               	movf	EscribeLCD_n8@decena^0,w,c
  1721   000CBE  0F30               	addlw	48
  1722   000CC0  ECD0  F007         	call	_EnviaDato
  1723                           
  1724                           ;LibLCDXC8.h: 161: HabilitaLCD();
  1725   000CC4  EC62  F008         	call	_HabilitaLCD	;wreg free
  1726                           
  1727                           ;LibLCDXC8.h: 162: RetardoLCD(4);
  1728   000CC8  0E04               	movlw	4
  1729   000CCA  EC9D  F007         	call	_RetardoLCD
  1730                           
  1731                           ;LibLCDXC8.h: 163: EnviaDato(unidad+48);
  1732   000CCE  500D               	movf	EscribeLCD_n8@unidad^0,w,c
  1733   000CD0  0F30               	addlw	48
  1734   000CD2  ECD0  F007         	call	_EnviaDato
  1735                           
  1736                           ;LibLCDXC8.h: 164: HabilitaLCD();
  1737   000CD6  EC62  F008         	call	_HabilitaLCD	;wreg free
  1738                           
  1739                           ;LibLCDXC8.h: 165: RetardoLCD(4);
  1740   000CDA  0E04               	movlw	4
  1741   000CDC  EC9D  F007         	call	_RetardoLCD
  1742                           
  1743                           ;LibLCDXC8.h: 166: break;
  1744   000CE0  0012               	return	
  1745   000CE2                     l1577:
  1746   000CE2  0E64               	movlw	100
  1747   000CE4  6E06               	movwf	___lbdiv@divisor^0,c
  1748   000CE6  500E               	movf	EscribeLCD_n8@a^0,w,c
  1749   000CE8  ECF3  F007         	call	___lbdiv
  1750   000CEC  6E0B               	movwf	EscribeLCD_n8@centena^0,c
  1751                           
  1752                           ;LibLCDXC8.h: 168: decena=(a%100)/10;
  1753   000CEE  0E0A               	movlw	10
  1754   000CF0  6E06               	movwf	___lbdiv@divisor^0,c
  1755   000CF2  0E64               	movlw	100
  1756   000CF4  6E02               	movwf	___lbmod@divisor^0,c
  1757   000CF6  500E               	movf	EscribeLCD_n8@a^0,w,c
  1758   000CF8  EC0F  F008         	call	___lbmod
  1759   000CFC  ECF3  F007         	call	___lbdiv
  1760   000D00  6E0C               	movwf	EscribeLCD_n8@decena^0,c
  1761                           
  1762                           ;LibLCDXC8.h: 169: unidad=a%10;
  1763   000D02  0E0A               	movlw	10
  1764   000D04  6E02               	movwf	___lbmod@divisor^0,c
  1765   000D06  500E               	movf	EscribeLCD_n8@a^0,w,c
  1766   000D08  EC0F  F008         	call	___lbmod
  1767   000D0C  6E0D               	movwf	EscribeLCD_n8@unidad^0,c
  1768                           
  1769                           ;LibLCDXC8.h: 170: EnviaDato(centena+48);
  1770   000D0E  500B               	movf	EscribeLCD_n8@centena^0,w,c
  1771   000D10  0F30               	addlw	48
  1772   000D12  ECD0  F007         	call	_EnviaDato
  1773                           
  1774                           ;LibLCDXC8.h: 171: HabilitaLCD();
  1775   000D16  EC62  F008         	call	_HabilitaLCD	;wreg free
  1776                           
  1777                           ;LibLCDXC8.h: 172: RetardoLCD(4);
  1778   000D1A  0E04               	movlw	4
  1779   000D1C  EC9D  F007         	call	_RetardoLCD
  1780                           
  1781                           ;LibLCDXC8.h: 173: EnviaDato(decena+48);
  1782   000D20  500C               	movf	EscribeLCD_n8@decena^0,w,c
  1783   000D22  0F30               	addlw	48
  1784   000D24  ECD0  F007         	call	_EnviaDato
  1785                           
  1786                           ;LibLCDXC8.h: 174: HabilitaLCD();
  1787   000D28  EC62  F008         	call	_HabilitaLCD	;wreg free
  1788                           
  1789                           ;LibLCDXC8.h: 175: RetardoLCD(4);
  1790   000D2C  0E04               	movlw	4
  1791   000D2E  EC9D  F007         	call	_RetardoLCD
  1792                           
  1793                           ;LibLCDXC8.h: 176: EnviaDato(unidad+48);
  1794   000D32  500D               	movf	EscribeLCD_n8@unidad^0,w,c
  1795   000D34  0F30               	addlw	48
  1796   000D36  ECD0  F007         	call	_EnviaDato
  1797                           
  1798                           ;LibLCDXC8.h: 177: HabilitaLCD();
  1799   000D3A  EC62  F008         	call	_HabilitaLCD	;wreg free
  1800                           
  1801                           ;LibLCDXC8.h: 178: RetardoLCD(4);
  1802   000D3E  0E04               	movlw	4
  1803   000D40  EC9D  F007         	call	_RetardoLCD
  1804                           
  1805                           ;LibLCDXC8.h: 179: break;
  1806   000D44  0012               	return	
  1807   000D46                     l1593:
  1808   000D46  500A               	movf	EscribeLCD_n8@b^0,w,c
  1809                           
  1810                           ; Switch size 1, requested type "simple"
  1811                           ; Number of cases is 3, Range of values is 1 to 3
  1812                           ; switch strategies available:
  1813                           ; Name         Instructions Cycles
  1814                           ; simple_byte           10     6 (average)
  1815                           ;	Chosen strategy is simple_byte
  1816   000D48  0A01               	xorlw	1	; case 1
  1817   000D4A  B4D8               	btfsc	status,2,c
  1818   000D4C  D797               	goto	l1561
  1819   000D4E  0A03               	xorlw	3	; case 2
  1820   000D50  B4D8               	btfsc	status,2,c
  1821   000D52  D7A4               	goto	l1567
  1822   000D54  0A01               	xorlw	1	; case 3
  1823   000D56  A4D8               	btfss	status,2,c
  1824   000D58  0012               	return	
  1825   000D5A  D7C3               	goto	l1577
  1826   000D5C                     __end_of_EscribeLCD_n8:
  1827                           	callstack 0
  1828                           
  1829 ;; *************** function ___lbmod *****************
  1830 ;; Defined at:
  1831 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\lbmod.c"
  1832 ;; Parameters:    Size  Location     Type
  1833 ;;  dividend        1    wreg     unsigned char 
  1834 ;;  divisor         1    1[COMRAM] unsigned char 
  1835 ;; Auto vars:     Size  Location     Type
  1836 ;;  dividend        1    2[COMRAM] unsigned char 
  1837 ;;  rem             1    4[COMRAM] unsigned char 
  1838 ;;  counter         1    3[COMRAM] unsigned char 
  1839 ;; Return value:  Size  Location     Type
  1840 ;;                  1    wreg      unsigned char 
  1841 ;; Registers used:
  1842 ;;		wreg, status,2, status,0
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1848 ;;      Params:         1       0       0       0       0       0       0       0       0
  1849 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1850 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1851 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1852 ;;Total ram usage:        4 bytes
  1853 ;; Hardware stack levels used: 1
  1854 ;; Hardware stack levels required when called: 1
  1855 ;; This function calls:
  1856 ;;		Nothing
  1857 ;; This function is called by:
  1858 ;;		_EscribeLCD_n8
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862                           	psect	text5
  1863   00101E                     __ptext5:
  1864                           	callstack 0
  1865   00101E                     ___lbmod:
  1866                           	callstack 28
  1867                           
  1868                           ;incstack = 0
  1869                           ;___lbmod@dividend stored from wreg
  1870   00101E  6E03               	movwf	___lbmod@dividend^0,c
  1871   001020  0E08               	movlw	8
  1872   001022  6E04               	movwf	___lbmod@counter^0,c
  1873   001024  6A05               	clrf	___lbmod@rem^0,c
  1874   001026                     l1545:
  1875   001026  90D8               	bcf	status,0,c
  1876   001028  3403               	rlcf	___lbmod@dividend^0,w,c
  1877   00102A  3405               	rlcf	___lbmod@rem^0,w,c
  1878   00102C  6E05               	movwf	___lbmod@rem^0,c
  1879   00102E  90D8               	bcf	status,0,c
  1880   001030  3603               	rlcf	___lbmod@dividend^0,f,c
  1881   001032  5002               	movf	___lbmod@divisor^0,w,c
  1882   001034  5C05               	subwf	___lbmod@rem^0,w,c
  1883   001036  A0D8               	btfss	status,0,c
  1884   001038  D002               	goto	l1553
  1885   00103A  5002               	movf	___lbmod@divisor^0,w,c
  1886   00103C  5E05               	subwf	___lbmod@rem^0,f,c
  1887   00103E                     l1553:
  1888   00103E  2E04               	decfsz	___lbmod@counter^0,f,c
  1889   001040  D7F2               	goto	l1545
  1890   001042  5005               	movf	___lbmod@rem^0,w,c
  1891   001044  0012               	return		;funcret
  1892   001046                     __end_of___lbmod:
  1893                           	callstack 0
  1894                           
  1895 ;; *************** function ___lbdiv *****************
  1896 ;; Defined at:
  1897 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c90\common\lbdiv.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  dividend        1    wreg     unsigned char 
  1900 ;;  divisor         1    5[COMRAM] unsigned char 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  dividend        1    6[COMRAM] unsigned char 
  1903 ;;  quotient        1    8[COMRAM] unsigned char 
  1904 ;;  counter         1    7[COMRAM] unsigned char 
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  1    wreg      unsigned char 
  1907 ;; Registers used:
  1908 ;;		wreg, status,2, status,0
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1914 ;;      Params:         1       0       0       0       0       0       0       0       0
  1915 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1916 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1917 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1918 ;;Total ram usage:        4 bytes
  1919 ;; Hardware stack levels used: 1
  1920 ;; Hardware stack levels required when called: 1
  1921 ;; This function calls:
  1922 ;;		Nothing
  1923 ;; This function is called by:
  1924 ;;		_EscribeLCD_n8
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           	psect	text6
  1929   000FE6                     __ptext6:
  1930                           	callstack 0
  1931   000FE6                     ___lbdiv:
  1932                           	callstack 28
  1933                           
  1934                           ;incstack = 0
  1935                           ;___lbdiv@dividend stored from wreg
  1936   000FE6  6E07               	movwf	___lbdiv@dividend^0,c
  1937   000FE8  6A09               	clrf	___lbdiv@quotient^0,c
  1938   000FEA  5006               	movf	___lbdiv@divisor^0,w,c
  1939   000FEC  B4D8               	btfsc	status,2,c
  1940   000FEE  D015               	goto	l1537
  1941   000FF0  0E01               	movlw	1
  1942   000FF2  6E08               	movwf	___lbdiv@counter^0,c
  1943   000FF4  D003               	goto	l1525
  1944   000FF6                     l1521:
  1945   000FF6  90D8               	bcf	status,0,c
  1946   000FF8  3606               	rlcf	___lbdiv@divisor^0,f,c
  1947   000FFA  2A08               	incf	___lbdiv@counter^0,f,c
  1948   000FFC                     l1525:
  1949   000FFC  AE06               	btfss	___lbdiv@divisor^0,7,c
  1950   000FFE  D7FB               	goto	l1521
  1951   001000                     u450:
  1952   001000  90D8               	bcf	status,0,c
  1953   001002  3609               	rlcf	___lbdiv@quotient^0,f,c
  1954   001004  5006               	movf	___lbdiv@divisor^0,w,c
  1955   001006  5C07               	subwf	___lbdiv@dividend^0,w,c
  1956   001008  A0D8               	btfss	status,0,c
  1957   00100A  D003               	goto	l1533
  1958   00100C  5006               	movf	___lbdiv@divisor^0,w,c
  1959   00100E  5E07               	subwf	___lbdiv@dividend^0,f,c
  1960   001010  8009               	bsf	___lbdiv@quotient^0,0,c
  1961   001012                     l1533:
  1962   001012  90D8               	bcf	status,0,c
  1963   001014  3206               	rrcf	___lbdiv@divisor^0,f,c
  1964   001016  2E08               	decfsz	___lbdiv@counter^0,f,c
  1965   001018  D7F3               	goto	u450
  1966   00101A                     l1537:
  1967   00101A  5009               	movf	___lbdiv@quotient^0,w,c
  1968   00101C  0012               	return		;funcret
  1969   00101E                     __end_of___lbdiv:
  1970                           	callstack 0
  1971                           
  1972 ;; *************** function _EscribeLCD_c *****************
  1973 ;; Defined at:
  1974 ;;		line 136 in file "LibLCDXC8.h"
  1975 ;; Parameters:    Size  Location     Type
  1976 ;;  a               1    wreg     unsigned char 
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;  a               1    5[COMRAM] unsigned char 
  1979 ;; Return value:  Size  Location     Type
  1980 ;;                  1    wreg      void 
  1981 ;; Registers used:
  1982 ;;		wreg, status,2, status,0, cstack
  1983 ;; Tracked objects:
  1984 ;;		On entry : 0/0
  1985 ;;		On exit  : 0/0
  1986 ;;		Unchanged: 0/0
  1987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1988 ;;      Params:         0       0       0       0       0       0       0       0       0
  1989 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1990 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1991 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1992 ;;Total ram usage:        1 bytes
  1993 ;; Hardware stack levels used: 1
  1994 ;; Hardware stack levels required when called: 3
  1995 ;; This function calls:
  1996 ;;		_EnviaDato
  1997 ;;		_HabilitaLCD
  1998 ;;		_RetardoLCD
  1999 ;; This function is called by:
  2000 ;;		_main
  2001 ;; This function uses a non-reentrant model
  2002 ;;
  2003                           
  2004                           	psect	text7
  2005   001084                     __ptext7:
  2006                           	callstack 0
  2007   001084                     _EscribeLCD_c:
  2008                           	callstack 27
  2009                           
  2010                           ;incstack = 0
  2011                           ;EscribeLCD_c@a stored from wreg
  2012   001084  6E06               	movwf	EscribeLCD_c@a^0,c
  2013                           
  2014                           ;LibLCDXC8.h: 140: LATD0=1;
  2015   001086  808C               	bsf	3980,0,c	;volatile
  2016                           
  2017                           ;LibLCDXC8.h: 141: EnviaDato(a);
  2018   001088  5006               	movf	EscribeLCD_c@a^0,w,c
  2019   00108A  ECD0  F007         	call	_EnviaDato
  2020                           
  2021                           ;LibLCDXC8.h: 142: HabilitaLCD();
  2022   00108E  EC62  F008         	call	_HabilitaLCD	;wreg free
  2023                           
  2024                           ;LibLCDXC8.h: 143: RetardoLCD(4);
  2025   001092  0E04               	movlw	4
  2026   001094  EC9D  F007         	call	_RetardoLCD
  2027   001098  0012               	return		;funcret
  2028   00109A                     __end_of_EscribeLCD_c:
  2029                           	callstack 0
  2030                           
  2031 ;; *************** function _DireccionaLCD *****************
  2032 ;; Defined at:
  2033 ;;		line 238 in file "LibLCDXC8.h"
  2034 ;; Parameters:    Size  Location     Type
  2035 ;;  a               1    wreg     unsigned char 
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;  a               1    5[COMRAM] unsigned char 
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  1    wreg      void 
  2040 ;; Registers used:
  2041 ;;		wreg, status,2, status,0, cstack
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2047 ;;      Params:         0       0       0       0       0       0       0       0       0
  2048 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2049 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2050 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2051 ;;Total ram usage:        1 bytes
  2052 ;; Hardware stack levels used: 1
  2053 ;; Hardware stack levels required when called: 3
  2054 ;; This function calls:
  2055 ;;		_EnviaDato
  2056 ;;		_HabilitaLCD
  2057 ;;		_RetardoLCD
  2058 ;; This function is called by:
  2059 ;;		_main
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           	psect	text8
  2064   00109A                     __ptext8:
  2065                           	callstack 0
  2066   00109A                     _DireccionaLCD:
  2067                           	callstack 27
  2068                           
  2069                           ;incstack = 0
  2070                           ;DireccionaLCD@a stored from wreg
  2071   00109A  6E06               	movwf	DireccionaLCD@a^0,c
  2072                           
  2073                           ;LibLCDXC8.h: 241: LATD0=0;
  2074   00109C  908C               	bcf	3980,0,c	;volatile
  2075                           
  2076                           ;LibLCDXC8.h: 242: EnviaDato(a);
  2077   00109E  5006               	movf	DireccionaLCD@a^0,w,c
  2078   0010A0  ECD0  F007         	call	_EnviaDato
  2079                           
  2080                           ;LibLCDXC8.h: 243: HabilitaLCD();
  2081   0010A4  EC62  F008         	call	_HabilitaLCD	;wreg free
  2082                           
  2083                           ;LibLCDXC8.h: 244: RetardoLCD(4);
  2084   0010A8  0E04               	movlw	4
  2085   0010AA  EC9D  F007         	call	_RetardoLCD
  2086   0010AE  0012               	return		;funcret
  2087   0010B0                     __end_of_DireccionaLCD:
  2088                           	callstack 0
  2089                           
  2090 ;; *************** function _EnviaDato *****************
  2091 ;; Defined at:
  2092 ;;		line 59 in file "LibLCDXC8.h"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;  a               1    wreg     unsigned char 
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;  a               1    4[COMRAM] unsigned char 
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  1    wreg      void 
  2099 ;; Registers used:
  2100 ;;		wreg, status,2, status,0, cstack
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2106 ;;      Params:         0       0       0       0       0       0       0       0       0
  2107 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2108 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2109 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2110 ;;Total ram usage:        2 bytes
  2111 ;; Hardware stack levels used: 1
  2112 ;; Hardware stack levels required when called: 2
  2113 ;; This function calls:
  2114 ;;		_HabilitaLCD
  2115 ;;		_RetardoLCD
  2116 ;; This function is called by:
  2117 ;;		_InicializaLCD
  2118 ;;		_BorraLCD
  2119 ;;		_EscribeLCD_c
  2120 ;;		_EscribeLCD_n8
  2121 ;;		_DireccionaLCD
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           	psect	text9
  2126   000FA0                     __ptext9:
  2127                           	callstack 0
  2128   000FA0                     _EnviaDato:
  2129                           	callstack 27
  2130                           
  2131                           ;incstack = 0
  2132                           ;EnviaDato@a stored from wreg
  2133   000FA0  6E05               	movwf	EnviaDato@a^0,c
  2134                           
  2135                           ;LibLCDXC8.h: 60: if(interfaz==4){
  2136   000FA2  0E04               	movlw	4
  2137   000FA4  1815               	xorwf	_interfaz^0,w,c
  2138   000FA6  A4D8               	btfss	status,2,c
  2139   000FA8  D017               	goto	l1019
  2140                           
  2141                           ;LibLCDXC8.h: 61: LATD=(LATD & 0b00001111) | (a & 0b11110000);
  2142   000FAA  C005  F004         	movff	EnviaDato@a,??_EnviaDato
  2143   000FAE  0EF0               	movlw	240
  2144   000FB0  1604               	andwf	??_EnviaDato^0,f,c
  2145   000FB2  508C               	movf	140,w,c	;volatile
  2146   000FB4  0B0F               	andlw	15
  2147   000FB6  1004               	iorwf	??_EnviaDato^0,w,c
  2148   000FB8  6E8C               	movwf	140,c	;volatile
  2149                           
  2150                           ;LibLCDXC8.h: 62: HabilitaLCD();
  2151   000FBA  EC62  F008         	call	_HabilitaLCD	;wreg free
  2152                           
  2153                           ;LibLCDXC8.h: 63: RetardoLCD(1);
  2154   000FBE  0E01               	movlw	1
  2155   000FC0  EC9D  F007         	call	_RetardoLCD
  2156                           
  2157                           ;LibLCDXC8.h: 64: LATD=(LATD & 0b00001111) | (a<<4);
  2158   000FC4  C005  F004         	movff	EnviaDato@a,??_EnviaDato
  2159   000FC8  3A04               	swapf	??_EnviaDato^0,f,c
  2160   000FCA  0EF0               	movlw	240
  2161   000FCC  1604               	andwf	??_EnviaDato^0,f,c
  2162   000FCE  508C               	movf	140,w,c	;volatile
  2163   000FD0  0B0F               	andlw	15
  2164   000FD2  1004               	iorwf	??_EnviaDato^0,w,c
  2165   000FD4  6E8C               	movwf	140,c	;volatile
  2166                           
  2167                           ;LibLCDXC8.h: 67: }else if(interfaz==8){
  2168   000FD6  0012               	return	
  2169   000FD8                     l1019:
  2170   000FD8  0E08               	movlw	8
  2171   000FDA  1815               	xorwf	_interfaz^0,w,c
  2172   000FDC  A4D8               	btfss	status,2,c
  2173   000FDE  0012               	return	
  2174                           
  2175                           ;LibLCDXC8.h: 68: LATD=a;
  2176   000FE0  C005  FF8C         	movff	EnviaDato@a,3980	;volatile
  2177   000FE4  0012               	return		;funcret
  2178   000FE6                     __end_of_EnviaDato:
  2179                           	callstack 0
  2180                           
  2181 ;; *************** function _RetardoLCD *****************
  2182 ;; Defined at:
  2183 ;;		line 274 in file "LibLCDXC8.h"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;  a               1    wreg     unsigned char 
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;  a               1    2[COMRAM] unsigned char 
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, status,2, status,0
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2197 ;;      Params:         0       0       0       0       0       0       0       0       0
  2198 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2199 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2200 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2201 ;;Total ram usage:        2 bytes
  2202 ;; Hardware stack levels used: 1
  2203 ;; Hardware stack levels required when called: 1
  2204 ;; This function calls:
  2205 ;;		Nothing
  2206 ;; This function is called by:
  2207 ;;		_EnviaDato
  2208 ;;		_InicializaLCD
  2209 ;;		_BorraLCD
  2210 ;;		_EscribeLCD_c
  2211 ;;		_EscribeLCD_n8
  2212 ;;		_DireccionaLCD
  2213 ;; This function uses a non-reentrant model
  2214 ;;
  2215                           
  2216                           	psect	text10
  2217   000F3A                     __ptext10:
  2218                           	callstack 0
  2219   000F3A                     _RetardoLCD:
  2220                           	callstack 28
  2221                           
  2222                           ;incstack = 0
  2223                           ;RetardoLCD@a stored from wreg
  2224   000F3A  6E03               	movwf	RetardoLCD@a^0,c
  2225                           
  2226                           ;LibLCDXC8.h: 275: switch(a){
  2227   000F3C  D023               	goto	l1007
  2228   000F3E                     l997:
  2229   000F3E  0E62               	movlw	98
  2230   000F40  6E02               	movwf	??_RetardoLCD^0,c
  2231   000F42  0E66               	movlw	102
  2232   000F44                     u627:
  2233   000F44  2EE8               	decfsz	wreg,f,c
  2234   000F46  D7FE               	bra	u627
  2235   000F48  2E02               	decfsz	??_RetardoLCD^0,f,c
  2236   000F4A  D7FC               	bra	u627
  2237                           
  2238                           ;LibLCDXC8.h: 278: break;
  2239   000F4C  0012               	return	
  2240   000F4E                     l999:
  2241   000F4E  0E07               	movlw	7
  2242   000F50  6E02               	movwf	??_RetardoLCD^0,c
  2243   000F52  0E7D               	movlw	125
  2244   000F54                     u637:
  2245   000F54  2EE8               	decfsz	wreg,f,c
  2246   000F56  D7FE               	bra	u637
  2247   000F58  2E02               	decfsz	??_RetardoLCD^0,f,c
  2248   000F5A  D7FC               	bra	u637
  2249   000F5C  0000               	nop	
  2250                           
  2251                           ;LibLCDXC8.h: 280: _delay((unsigned long)((640)*(20000000/4000000.0)));
  2252   000F5E  0E05               	movlw	5
  2253   000F60  6E02               	movwf	??_RetardoLCD^0,c
  2254   000F62  0E26               	movlw	38
  2255   000F64                     u647:
  2256   000F64  2EE8               	decfsz	wreg,f,c
  2257   000F66  D7FE               	bra	u647
  2258   000F68  2E02               	decfsz	??_RetardoLCD^0,f,c
  2259   000F6A  D7FC               	bra	u647
  2260   000F6C  D000               	nop2	
  2261                           
  2262                           ;LibLCDXC8.h: 282: break;
  2263   000F6E  0012               	return	
  2264   000F70                     l1001:
  2265   000F70  0EA6               	movlw	166
  2266   000F72                     u657:
  2267   000F72  2EE8               	decfsz	wreg,f,c
  2268   000F74  D7FE               	bra	u657
  2269   000F76  D000               	nop2	
  2270                           
  2271                           ;LibLCDXC8.h: 285: break;
  2272   000F78  0012               	return	
  2273   000F7A                     l1003:
  2274   000F7A  0E42               	movlw	66
  2275   000F7C                     u667:
  2276   000F7C  2EE8               	decfsz	wreg,f,c
  2277   000F7E  D7FE               	bra	u667
  2278   000F80  D000               	nop2	
  2279                           
  2280                           ;LibLCDXC8.h: 288: break;
  2281   000F82  0012               	return	
  2282   000F84                     l1007:
  2283   000F84  5003               	movf	RetardoLCD@a^0,w,c
  2284                           
  2285                           ; Switch size 1, requested type "simple"
  2286                           ; Number of cases is 4, Range of values is 1 to 4
  2287                           ; switch strategies available:
  2288                           ; Name         Instructions Cycles
  2289                           ; simple_byte           13     7 (average)
  2290                           ;	Chosen strategy is simple_byte
  2291   000F86  0A01               	xorlw	1	; case 1
  2292   000F88  B4D8               	btfsc	status,2,c
  2293   000F8A  D7D9               	goto	l997
  2294   000F8C  0A03               	xorlw	3	; case 2
  2295   000F8E  B4D8               	btfsc	status,2,c
  2296   000F90  D7DE               	goto	l999
  2297   000F92  0A01               	xorlw	1	; case 3
  2298   000F94  B4D8               	btfsc	status,2,c
  2299   000F96  D7EC               	goto	l1001
  2300   000F98  0A07               	xorlw	7	; case 4
  2301   000F9A  A4D8               	btfss	status,2,c
  2302   000F9C  0012               	return	
  2303   000F9E  D7ED               	goto	l1003
  2304   000FA0                     __end_of_RetardoLCD:
  2305                           	callstack 0
  2306                           
  2307 ;; *************** function _HabilitaLCD *****************
  2308 ;; Defined at:
  2309 ;;		line 105 in file "LibLCDXC8.h"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;		None
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;		None
  2314 ;; Return value:  Size  Location     Type
  2315 ;;                  1    wreg      void 
  2316 ;; Registers used:
  2317 ;;		wreg
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 0/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2323 ;;      Params:         0       0       0       0       0       0       0       0       0
  2324 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2325 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2326 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2327 ;;Total ram usage:        0 bytes
  2328 ;; Hardware stack levels used: 1
  2329 ;; Hardware stack levels required when called: 1
  2330 ;; This function calls:
  2331 ;;		Nothing
  2332 ;; This function is called by:
  2333 ;;		_EnviaDato
  2334 ;;		_InicializaLCD
  2335 ;;		_BorraLCD
  2336 ;;		_EscribeLCD_c
  2337 ;;		_EscribeLCD_n8
  2338 ;;		_DireccionaLCD
  2339 ;; This function uses a non-reentrant model
  2340 ;;
  2341                           
  2342                           	psect	text11
  2343   0010C4                     __ptext11:
  2344                           	callstack 0
  2345   0010C4                     _HabilitaLCD:
  2346                           	callstack 28
  2347                           
  2348                           ;LibLCDXC8.h: 107: LATD1=1;
  2349                           
  2350                           ;incstack = 0
  2351   0010C4  828C               	bsf	3980,1,c	;volatile
  2352                           
  2353                           ;LibLCDXC8.h: 108: _delay((unsigned long)((40)*(20000000/4000000.0)));
  2354   0010C6  0E42               	movlw	66
  2355   0010C8                     u677:
  2356   0010C8  2EE8               	decfsz	wreg,f,c
  2357   0010CA  D7FE               	bra	u677
  2358   0010CC  D000               	nop2	
  2359                           
  2360                           ;LibLCDXC8.h: 110: LATD1=0;
  2361   0010CE  928C               	bcf	3980,1,c	;volatile
  2362   0010D0  0012               	return		;funcret
  2363   0010D2                     __end_of_HabilitaLCD:
  2364                           	callstack 0
  2365                           
  2366 ;; *************** function _ConfiguraLCD *****************
  2367 ;; Defined at:
  2368 ;;		line 55 in file "LibLCDXC8.h"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;  a               1    wreg     unsigned char 
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;  a               1    1[COMRAM] unsigned char 
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  1    wreg      void 
  2375 ;; Registers used:
  2376 ;;		wreg, status,2, status,0
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2382 ;;      Params:         0       0       0       0       0       0       0       0       0
  2383 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2384 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2385 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2386 ;;Total ram usage:        1 bytes
  2387 ;; Hardware stack levels used: 1
  2388 ;; Hardware stack levels required when called: 1
  2389 ;; This function calls:
  2390 ;;		Nothing
  2391 ;; This function is called by:
  2392 ;;		_main
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text12
  2397   00106C                     __ptext12:
  2398                           	callstack 0
  2399   00106C                     _ConfiguraLCD:
  2400                           	callstack 29
  2401                           
  2402                           ;incstack = 0
  2403                           ;ConfiguraLCD@a stored from wreg
  2404   00106C  6E02               	movwf	ConfiguraLCD@a^0,c
  2405                           
  2406                           ;LibLCDXC8.h: 56: if(a==4 | a ==8)
  2407   00106E  0E04               	movlw	4
  2408   001070  1802               	xorwf	ConfiguraLCD@a^0,w,c
  2409   001072  B4D8               	btfsc	status,2,c
  2410   001074  D004               	goto	u80
  2411   001076  0E08               	movlw	8
  2412   001078  1802               	xorwf	ConfiguraLCD@a^0,w,c
  2413   00107A  A4D8               	btfss	status,2,c
  2414   00107C  0012               	return	
  2415   00107E                     u80:
  2416                           
  2417                           ;LibLCDXC8.h: 57: interfaz=a;
  2418   00107E  C002  F015         	movff	ConfiguraLCD@a,_interfaz
  2419   001082  0012               	return		;funcret
  2420   001084                     __end_of_ConfiguraLCD:
  2421                           	callstack 0
  2422                           
  2423 ;; *************** function _ISR *****************
  2424 ;; Defined at:
  2425 ;;		line 269 in file "Lab4C.c"
  2426 ;; Parameters:    Size  Location     Type
  2427 ;;		None
  2428 ;; Auto vars:     Size  Location     Type
  2429 ;;		None
  2430 ;; Return value:  Size  Location     Type
  2431 ;;                  1    wreg      void 
  2432 ;; Registers used:
  2433 ;;		wreg, status,2, status,0
  2434 ;; Tracked objects:
  2435 ;;		On entry : 0/0
  2436 ;;		On exit  : 0/0
  2437 ;;		Unchanged: 0/0
  2438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2439 ;;      Params:         0       0       0       0       0       0       0       0       0
  2440 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2441 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2442 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2443 ;;Total ram usage:        1 bytes
  2444 ;; Hardware stack levels used: 1
  2445 ;; This function calls:
  2446 ;;		Nothing
  2447 ;; This function is called by:
  2448 ;;		Interrupt level 2
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           	psect	intcode
  2453   000008                     __pintcode:
  2454                           	callstack 0
  2455   000008                     _ISR:
  2456                           	callstack 26
  2457                           
  2458                           ;incstack = 0
  2459   000008  8216               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2460   00000A  EDAE  F006         	call	int_func,f	;refresh shadow registers
  2461                           
  2462                           	psect	intcode_body
  2463   000D5C                     __pintcode_body:
  2464                           	callstack 26
  2465   000D5C                     int_func:
  2466                           	callstack 26
  2467   000D5C  0006               	pop		; remove dummy address from shadow register refresh
  2468                           
  2469                           ;Lab4C.c: 270: if(RBIF==1){
  2470   000D5E  A0F2               	btfss	4082,0,c	;volatile
  2471   000D60  D058               	goto	i2l1507
  2472                           
  2473                           ;Lab4C.c: 271: if(PORTB!=0b11110000){
  2474   000D62  0EF0               	movlw	240
  2475   000D64  1881               	xorwf	129,w,c	;volatile
  2476   000D66  B4D8               	btfsc	status,2,c
  2477   000D68  D04B               	goto	i2l1503
  2478                           
  2479                           ;Lab4C.c: 272: Tecla=0;
  2480   000D6A  6A14               	clrf	_Tecla^0,c
  2481                           
  2482                           ;Lab4C.c: 273: LATB=0b11111110;
  2483   000D6C  0EFE               	movlw	254
  2484   000D6E  6E8A               	movwf	138,c	;volatile
  2485                           
  2486                           ;Lab4C.c: 274: if(RB4==0) Tecla=1;
  2487   000D70  B881               	btfsc	3969,4,c	;volatile
  2488   000D72  D002               	goto	i2l209
  2489   000D74  0E01               	movlw	1
  2490   000D76  D041               	goto	L18
  2491   000D78                     i2l209:
  2492                           
  2493                           ;Lab4C.c: 275: else if(RB5==0) Tecla=2;
  2494   000D78  BA81               	btfsc	3969,5,c	;volatile
  2495   000D7A  D002               	goto	i2l211
  2496   000D7C  0E02               	movlw	2
  2497   000D7E  D03D               	goto	L18
  2498   000D80                     i2l211:
  2499                           
  2500                           ;Lab4C.c: 276: else if(RB6==0) Tecla=3;
  2501   000D80  BC81               	btfsc	3969,6,c	;volatile
  2502   000D82  D002               	goto	i2l213
  2503   000D84  0E03               	movlw	3
  2504   000D86  D039               	goto	L18
  2505   000D88                     i2l213:
  2506                           
  2507                           ;Lab4C.c: 277: else if(RB7==0) Tecla=4;
  2508   000D88  BE81               	btfsc	3969,7,c	;volatile
  2509   000D8A  D002               	goto	i2l1467
  2510   000D8C  0E04               	movlw	4
  2511   000D8E  D035               	goto	L18
  2512   000D90                     i2l1467:
  2513                           
  2514                           ;Lab4C.c: 278: else{;Lab4C.c: 279: LATB=0b11111101;
  2515   000D90  0EFD               	movlw	253
  2516   000D92  6E8A               	movwf	138,c	;volatile
  2517                           
  2518                           ;Lab4C.c: 280: if(RB4==0) Tecla=5;
  2519   000D94  B881               	btfsc	3969,4,c	;volatile
  2520   000D96  D002               	goto	i2l217
  2521   000D98  0E05               	movlw	5
  2522   000D9A  D02F               	goto	L18
  2523   000D9C                     i2l217:
  2524                           
  2525                           ;Lab4C.c: 281: else if(RB5==0) Tecla=6;
  2526   000D9C  BA81               	btfsc	3969,5,c	;volatile
  2527   000D9E  D002               	goto	i2l219
  2528   000DA0  0E06               	movlw	6
  2529   000DA2  D02B               	goto	L18
  2530   000DA4                     i2l219:
  2531                           
  2532                           ;Lab4C.c: 282: else if(RB6==0) Tecla=7;
  2533   000DA4  BC81               	btfsc	3969,6,c	;volatile
  2534   000DA6  D002               	goto	i2l221
  2535   000DA8  0E07               	movlw	7
  2536   000DAA  D027               	goto	L18
  2537   000DAC                     i2l221:
  2538                           
  2539                           ;Lab4C.c: 283: else if(RB7==0) Tecla=8;
  2540   000DAC  BE81               	btfsc	3969,7,c	;volatile
  2541   000DAE  D002               	goto	i2l1479
  2542   000DB0  0E08               	movlw	8
  2543   000DB2  D023               	goto	L18
  2544   000DB4                     i2l1479:
  2545                           
  2546                           ;Lab4C.c: 284: else{;Lab4C.c: 285: LATB=0b11111011;
  2547   000DB4  0EFB               	movlw	251
  2548   000DB6  6E8A               	movwf	138,c	;volatile
  2549                           
  2550                           ;Lab4C.c: 286: if(RB4==0) Tecla=9;
  2551   000DB8  B881               	btfsc	3969,4,c	;volatile
  2552   000DBA  D002               	goto	i2l225
  2553   000DBC  0E09               	movlw	9
  2554   000DBE  D01D               	goto	L18
  2555   000DC0                     i2l225:
  2556                           
  2557                           ;Lab4C.c: 287: else if(RB5==0) Tecla=10;
  2558   000DC0  BA81               	btfsc	3969,5,c	;volatile
  2559   000DC2  D002               	goto	i2l227
  2560   000DC4  0E0A               	movlw	10
  2561   000DC6  D019               	goto	L18
  2562   000DC8                     i2l227:
  2563                           
  2564                           ;Lab4C.c: 288: else if(RB6==0) Tecla=11;
  2565   000DC8  BC81               	btfsc	3969,6,c	;volatile
  2566   000DCA  D002               	goto	i2l229
  2567   000DCC  0E0B               	movlw	11
  2568   000DCE  D015               	goto	L18
  2569   000DD0                     i2l229:
  2570                           
  2571                           ;Lab4C.c: 289: else if(RB7==0) Tecla=12;
  2572   000DD0  BE81               	btfsc	3969,7,c	;volatile
  2573   000DD2  D002               	goto	i2l1491
  2574   000DD4  0E0C               	movlw	12
  2575   000DD6  D011               	goto	L18
  2576   000DD8                     i2l1491:
  2577                           
  2578                           ;Lab4C.c: 290: else{;Lab4C.c: 291: LATB=0b11110111;
  2579   000DD8  0EF7               	movlw	247
  2580   000DDA  6E8A               	movwf	138,c	;volatile
  2581                           
  2582                           ;Lab4C.c: 292: if(RB4==0) Tecla=13;
  2583   000DDC  B881               	btfsc	3969,4,c	;volatile
  2584   000DDE  D002               	goto	i2l233
  2585   000DE0  0E0D               	movlw	13
  2586   000DE2  D00B               	goto	L18
  2587   000DE4                     i2l233:
  2588                           
  2589                           ;Lab4C.c: 293: else if(RB5==0) Tecla=14;
  2590   000DE4  BA81               	btfsc	3969,5,c	;volatile
  2591   000DE6  D002               	goto	i2l235
  2592   000DE8  0E0E               	movlw	14
  2593   000DEA  D007               	goto	L18
  2594   000DEC                     i2l235:
  2595                           
  2596                           ;Lab4C.c: 294: else if(RB6==0) Tecla=15;
  2597   000DEC  BC81               	btfsc	3969,6,c	;volatile
  2598   000DEE  D002               	goto	i2l237
  2599   000DF0  0E0F               	movlw	15
  2600   000DF2  D003               	goto	L18
  2601   000DF4                     i2l237:
  2602                           
  2603                           ;Lab4C.c: 295: else if(RB7==0) Tecla=16;
  2604   000DF4  BE81               	btfsc	3969,7,c	;volatile
  2605   000DF6  D002               	goto	i2l234
  2606   000DF8  0E10               	movlw	16
  2607   000DFA                     L18:
  2608   000DFA  6E14               	movwf	_Tecla^0,c
  2609   000DFC                     i2l234:
  2610                           
  2611                           ;Lab4C.c: 296: };Lab4C.c: 297: };Lab4C.c: 298: };Lab4C.c: 299: LATB=0b11110000;
  2612   000DFC  0EF0               	movlw	240
  2613   000DFE  6E8A               	movwf	138,c	;volatile
  2614   000E00                     i2l1503:
  2615                           
  2616                           ;Lab4C.c: 300: };Lab4C.c: 301: _delay((unsigned long)((100)*(1000000/4000.0)));
  2617   000E00  0E21               	movlw	33
  2618   000E02  6E01               	movwf	??_ISR^0,c
  2619   000E04  0E76               	movlw	118
  2620   000E06                     i2u68_47:
  2621   000E06  2EE8               	decfsz	wreg,f,c
  2622   000E08  D7FE               	bra	i2u68_47
  2623   000E0A  2E01               	decfsz	??_ISR^0,f,c
  2624   000E0C  D7FC               	bra	i2u68_47
  2625   000E0E  D000               	nop2	
  2626                           
  2627                           ;Lab4C.c: 302: RBIF=0;
  2628   000E10  90F2               	bcf	4082,0,c	;volatile
  2629   000E12                     i2l1507:
  2630                           
  2631                           ;Lab4C.c: 303: };Lab4C.c: 304: if(TMR0IF==1){
  2632   000E12  A4F2               	btfss	4082,2,c	;volatile
  2633   000E14  D00A               	goto	i2u43_45
  2634                           
  2635                           ;Lab4C.c: 305: TMR0IF=0;
  2636   000E16  94F2               	bcf	4082,2,c	;volatile
  2637                           
  2638                           ;Lab4C.c: 306: TMR0=3036;
  2639   000E18  0E0B               	movlw	11
  2640   000E1A  6ED7               	movwf	215,c	;volatile
  2641   000E1C  0EDC               	movlw	220
  2642   000E1E  6ED6               	movwf	214,c	;volatile
  2643                           
  2644                           ;Lab4C.c: 307: LATD1=LATD1^1;
  2645   000E20  B28C               	btfsc	3980,1,c	;volatile
  2646   000E22  D002               	goto	i2u42_40
  2647   000E24  828C               	bsf	3980,1,c	;volatile
  2648   000E26  D001               	goto	i2u43_45
  2649   000E28                     i2u42_40:
  2650   000E28  928C               	bcf	3980,1,c	;volatile
  2651   000E2A                     i2u43_45:
  2652   000E2A  9216               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2653   000E2C  0011               	retfie		f
  2654   000E2E                     __end_of_ISR:
  2655                           	callstack 0
  2656                           
  2657                           	psect	smallconst
  2658   000800                     __psmallconst:
  2659                           	callstack 0
  2660   000800  00                 	db	0
  2661   000801  00                 	db	0	; dummy byte at the end
  2662   000002                     __activetblptr  equ	2
  2663                           
  2664                           	psect	rparam
  2665   000001                     ___rparam_used  equ	1
  2666   000000                     ___param_bank   equ	0
  2667   000000                     __Lparam        equ	__Lrparam
  2668   000000                     __Hparam        equ	__Hrparam
  2669                           
  2670                           	psect	temp
  2671   000016                     btemp:
  2672                           	callstack 0
  2673   000016                     	ds	1
  2674   000016                     int$flags       set	btemp
  2675   000017                     wtemp8          set	btemp+1
  2676   000017                     ttemp5          set	btemp+1
  2677   00001A                     ttemp6          set	btemp+4
  2678   00001E                     ttemp7          set	btemp+8
  2679                           
  2680                           	psect	idloc
  2681                           
  2682                           ;Config register IDLOC0 @ 0x200000
  2683                           ;	unspecified, using default values
  2684   200000                     	org	2097152
  2685   200000  FF                 	db	255
  2686                           
  2687                           ;Config register IDLOC1 @ 0x200001
  2688                           ;	unspecified, using default values
  2689   200001                     	org	2097153
  2690   200001  FF                 	db	255
  2691                           
  2692                           ;Config register IDLOC2 @ 0x200002
  2693                           ;	unspecified, using default values
  2694   200002                     	org	2097154
  2695   200002  FF                 	db	255
  2696                           
  2697                           ;Config register IDLOC3 @ 0x200003
  2698                           ;	unspecified, using default values
  2699   200003                     	org	2097155
  2700   200003  FF                 	db	255
  2701                           
  2702                           ;Config register IDLOC4 @ 0x200004
  2703                           ;	unspecified, using default values
  2704   200004                     	org	2097156
  2705   200004  FF                 	db	255
  2706                           
  2707                           ;Config register IDLOC5 @ 0x200005
  2708                           ;	unspecified, using default values
  2709   200005                     	org	2097157
  2710   200005  FF                 	db	255
  2711                           
  2712                           ;Config register IDLOC6 @ 0x200006
  2713                           ;	unspecified, using default values
  2714   200006                     	org	2097158
  2715   200006  FF                 	db	255
  2716                           
  2717                           ;Config register IDLOC7 @ 0x200007
  2718                           ;	unspecified, using default values
  2719   200007                     	org	2097159
  2720   200007  FF                 	db	255
  2721                           
  2722                           	psect	config
  2723                           
  2724                           ;Config register CONFIG1L @ 0x300000
  2725                           ;	unspecified, using default values
  2726                           ;	PLL Prescaler Selection bits
  2727                           ;	PLLDIV = 0x0, unprogrammed default
  2728                           ;	System Clock Postscaler Selection bits
  2729                           ;	CPUDIV = 0x0, unprogrammed default
  2730                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  2731                           ;	USBDIV = 0x0, unprogrammed default
  2732   300000                     	org	3145728
  2733   300000  00                 	db	0
  2734                           
  2735                           ;Config register CONFIG1H @ 0x300001
  2736                           ;	Oscillator Selection bits
  2737                           ;	FOSC = INTOSC_EC, Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO)
  2738                           ;	Fail-Safe Clock Monitor Enable bit
  2739                           ;	FCMEN = 0x0, unprogrammed default
  2740                           ;	Internal/External Oscillator Switchover bit
  2741                           ;	IESO = 0x0, unprogrammed default
  2742   300001                     	org	3145729
  2743   300001  09                 	db	9
  2744                           
  2745                           ;Config register CONFIG2L @ 0x300002
  2746                           ;	unspecified, using default values
  2747                           ;	Power-up Timer Enable bit
  2748                           ;	PWRT = 0x1, unprogrammed default
  2749                           ;	Brown-out Reset Enable bits
  2750                           ;	BOR = 0x3, unprogrammed default
  2751                           ;	Brown-out Reset Voltage bits
  2752                           ;	BORV = 0x3, unprogrammed default
  2753                           ;	USB Voltage Regulator Enable bit
  2754                           ;	VREGEN = 0x0, unprogrammed default
  2755   300002                     	org	3145730
  2756   300002  1F                 	db	31
  2757                           
  2758                           ;Config register CONFIG2H @ 0x300003
  2759                           ;	Watchdog Timer Enable bit
  2760                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2761                           ;	Watchdog Timer Postscale Select bits
  2762                           ;	WDTPS = 0xF, unprogrammed default
  2763   300003                     	org	3145731
  2764   300003  1E                 	db	30
  2765                           
  2766                           ; Padding undefined space
  2767   300004                     	org	3145732
  2768   300004  FF                 	db	255
  2769                           
  2770                           ;Config register CONFIG3H @ 0x300005
  2771                           ;	CCP2 MUX bit
  2772                           ;	CCP2MX = 0x1, unprogrammed default
  2773                           ;	PORTB A/D Enable bit
  2774                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  2775                           ;	Low-Power Timer 1 Oscillator Enable bit
  2776                           ;	LPT1OSC = 0x0, unprogrammed default
  2777                           ;	MCLR Pin Enable bit
  2778                           ;	MCLRE = 0x1, unprogrammed default
  2779   300005                     	org	3145733
  2780   300005  81                 	db	129
  2781                           
  2782                           ;Config register CONFIG4L @ 0x300006
  2783                           ;	Stack Full/Underflow Reset Enable bit
  2784                           ;	STVREN = 0x1, unprogrammed default
  2785                           ;	Single-Supply ICSP Enable bit
  2786                           ;	LVP = OFF, Single-Supply ICSP disabled
  2787                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  2788                           ;	ICPRT = 0x0, unprogrammed default
  2789                           ;	Extended Instruction Set Enable bit
  2790                           ;	XINST = 0x0, unprogrammed default
  2791                           ;	Background Debugger Enable bit
  2792                           ;	DEBUG = 0x1, unprogrammed default
  2793   300006                     	org	3145734
  2794   300006  81                 	db	129
  2795                           
  2796                           ; Padding undefined space
  2797   300007                     	org	3145735
  2798   300007  FF                 	db	255
  2799                           
  2800                           ;Config register CONFIG5L @ 0x300008
  2801                           ;	unspecified, using default values
  2802                           ;	Code Protection bit
  2803                           ;	CP0 = 0x1, unprogrammed default
  2804                           ;	Code Protection bit
  2805                           ;	CP1 = 0x1, unprogrammed default
  2806                           ;	Code Protection bit
  2807                           ;	CP2 = 0x1, unprogrammed default
  2808                           ;	Code Protection bit
  2809                           ;	CP3 = 0x1, unprogrammed default
  2810   300008                     	org	3145736
  2811   300008  0F                 	db	15
  2812                           
  2813                           ;Config register CONFIG5H @ 0x300009
  2814                           ;	unspecified, using default values
  2815                           ;	Boot Block Code Protection bit
  2816                           ;	CPB = 0x1, unprogrammed default
  2817                           ;	Data EEPROM Code Protection bit
  2818                           ;	CPD = 0x1, unprogrammed default
  2819   300009                     	org	3145737
  2820   300009  C0                 	db	192
  2821                           
  2822                           ;Config register CONFIG6L @ 0x30000A
  2823                           ;	unspecified, using default values
  2824                           ;	Write Protection bit
  2825                           ;	WRT0 = 0x1, unprogrammed default
  2826                           ;	Write Protection bit
  2827                           ;	WRT1 = 0x1, unprogrammed default
  2828                           ;	Write Protection bit
  2829                           ;	WRT2 = 0x1, unprogrammed default
  2830                           ;	Write Protection bit
  2831                           ;	WRT3 = 0x1, unprogrammed default
  2832   30000A                     	org	3145738
  2833   30000A  0F                 	db	15
  2834                           
  2835                           ;Config register CONFIG6H @ 0x30000B
  2836                           ;	unspecified, using default values
  2837                           ;	Configuration Register Write Protection bit
  2838                           ;	WRTC = 0x1, unprogrammed default
  2839                           ;	Boot Block Write Protection bit
  2840                           ;	WRTB = 0x1, unprogrammed default
  2841                           ;	Data EEPROM Write Protection bit
  2842                           ;	WRTD = 0x1, unprogrammed default
  2843   30000B                     	org	3145739
  2844   30000B  E0                 	db	224
  2845                           
  2846                           ;Config register CONFIG7L @ 0x30000C
  2847                           ;	unspecified, using default values
  2848                           ;	Table Read Protection bit
  2849                           ;	EBTR0 = 0x1, unprogrammed default
  2850                           ;	Table Read Protection bit
  2851                           ;	EBTR1 = 0x1, unprogrammed default
  2852                           ;	Table Read Protection bit
  2853                           ;	EBTR2 = 0x1, unprogrammed default
  2854                           ;	Table Read Protection bit
  2855                           ;	EBTR3 = 0x1, unprogrammed default
  2856   30000C                     	org	3145740
  2857   30000C  0F                 	db	15
  2858                           
  2859                           ;Config register CONFIG7H @ 0x30000D
  2860                           ;	unspecified, using default values
  2861                           ;	Boot Block Table Read Protection bit
  2862                           ;	EBTRB = 0x1, unprogrammed default
  2863   30000D                     	org	3145741
  2864   30000D  40                 	db	64
  2865                           tosu	equ	0xFFF
  2866                           tosh	equ	0xFFE
  2867                           tosl	equ	0xFFD
  2868                           stkptr	equ	0xFFC
  2869                           pclatu	equ	0xFFB
  2870                           pclath	equ	0xFFA
  2871                           pcl	equ	0xFF9
  2872                           tblptru	equ	0xFF8
  2873                           tblptrh	equ	0xFF7
  2874                           tblptrl	equ	0xFF6
  2875                           tablat	equ	0xFF5
  2876                           prodh	equ	0xFF4
  2877                           prodl	equ	0xFF3
  2878                           indf0	equ	0xFEF
  2879                           postinc0	equ	0xFEE
  2880                           postdec0	equ	0xFED
  2881                           preinc0	equ	0xFEC
  2882                           plusw0	equ	0xFEB
  2883                           fsr0h	equ	0xFEA
  2884                           fsr0l	equ	0xFE9
  2885                           wreg	equ	0xFE8
  2886                           indf1	equ	0xFE7
  2887                           postinc1	equ	0xFE6
  2888                           postdec1	equ	0xFE5
  2889                           preinc1	equ	0xFE4
  2890                           plusw1	equ	0xFE3
  2891                           fsr1h	equ	0xFE2
  2892                           fsr1l	equ	0xFE1
  2893                           bsr	equ	0xFE0
  2894                           indf2	equ	0xFDF
  2895                           postinc2	equ	0xFDE
  2896                           postdec2	equ	0xFDD
  2897                           preinc2	equ	0xFDC
  2898                           plusw2	equ	0xFDB
  2899                           fsr2h	equ	0xFDA
  2900                           fsr2l	equ	0xFD9
  2901                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     17      21
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_EscribeLCD_n8
    _InicializaLCD->_EnviaDato
    _BorraLCD->_EnviaDato
    _EscribeLCD_n8->___lbdiv
    ___lbdiv->___lbmod
    _EscribeLCD_c->_EnviaDato
    _DireccionaLCD->_EnviaDato
    _EnviaDato->_RetardoLCD

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1269
                                             14 COMRAM     3     3      0
                           _BorraLCD
                       _ConfiguraLCD
                      _DireccionaLCD
                       _EscribeLCD_c
                      _EscribeLCD_n8
                      _InicializaLCD
                      _obtenerNumero
 ---------------------------------------------------------------------------------
 (1) _obtenerNumero                                        1     1      0      15
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InicializaLCD                                        0     0      0     150
                           _BorraLCD
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (2) _BorraLCD                                             0     0      0      75
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (1) _EscribeLCD_n8                                        5     4      1     759
                                              9 COMRAM     5     4      1
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     172
                                              1 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     173
                                              5 COMRAM     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _EscribeLCD_c                                         1     1      0      90
                                              5 COMRAM     1     1      0
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (1) _DireccionaLCD                                        1     1      0      90
                                              5 COMRAM     1     1      0
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (2) _EnviaDato                                            2     2      0      60
                                              3 COMRAM     2     2      0
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (2) _RetardoLCD                                           2     2      0      15
                                              1 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _HabilitaLCD                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfiguraLCD                                         1     1      0      45
                                              1 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BorraLCD
     _EnviaDato
       _HabilitaLCD
       _RetardoLCD
     _HabilitaLCD
     _RetardoLCD
   _ConfiguraLCD
   _DireccionaLCD
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
   _EscribeLCD_c
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
   _EscribeLCD_n8
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
     ___lbdiv
       ___lbmod (ARG)
     ___lbmod
   _InicializaLCD
     _BorraLCD
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
   _obtenerNumero

 _ISR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            2047      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0       0      0.0%
BITBIGSFRlh        111      0       0      0.0%
BITCOMRAM           94      0       0      0.0%
COMRAM              94     17      21     22.3%
BITBIGSFRll         33      0       0      0.0%
BITBIGSFRh          14      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      21      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Jul 17 14:39:32 2025

                     u80 107E               EnviaDato@a 0005            _InicializaLCD 0E2E  
                    _GIE 7F97                      l997 0F3E                      l999 0F4E  
                    _RB4 7C0C                      _RB5 7C0D                      _RB6 7C0E  
                    _RB7 7C0F                      u450 1000                      _ISR 0008  
                    u607 08A2                      u617 0C68                      u627 0F44  
                    u637 0F54                      u647 0F64                      u657 0F72  
                    u667 0F7C                      u587 0814                      u677 10C8  
                    u597 082E                      wreg 0FE8                     ?_ISR 0001  
                   l1001 0F70                     l1003 0F7A                     l1007 0F84  
                   l1105 0E7C                     l1019 0FD8                     l1211 0EE6  
                   l1203 0EDE                     l1125 0EB4                     l1223 0EF2  
                   l1215 0EEA                     l1207 0EE2                     l1233 0EFA  
                   l1227 0EF6                     l1219 0EEE                     l1085 0E40  
                   l1095 0E5E                     l1191 0ED2                     l1521 0FF6  
                   l1195 0ED6                     l1187 0ECE                     l1533 1012  
                   l1525 0FFC                     l1199 0EDA                     l1711 09D8  
                   l1537 101A                     l1553 103E                     l1545 1026  
                   l1561 0C7C                     l1801 0BE0                     l1705 095E  
                   l1715 0AD8                     l1567 0C9C                     l1577 0CE2  
                   l1593 0D46                     l1689 0924                     _LATB 0F8A  
                   _LATD 0F8C                     _RBIE 7F93                     _RBIF 7F90  
                   _RBPU 7F8F                     _TMR0 0FD6           ??_EscribeLCD_c 0006  
                   _main 0802                     btemp 0016                     prodl 0FF3  
                   start 000E             ___param_bank 0000                    ??_ISR 0001  
         ?_InicializaLCD 0001                    ?_main 0001          __end_of___lbdiv 101E  
          EscribeLCD_c@a 0006          __end_of___lbmod 1046                    _LATD0 7C60  
                  _LATD1 7C61                    i2l211 0D80                    i2l221 0DAC  
                  i2l213 0D88                    i2l233 0DE4                    i2l225 0DC0  
                  i2l217 0D9C                    i2l209 0D78                    i2l234 0DFC  
                  i2l235 0DEC                    i2l227 0DC8                    i2l219 0DA4  
                  i2l237 0DF4                    i2l229 0DD0                    _PORTB 0F81  
                  _TRISB 0F93                    _TRISD 0F95          ??_EscribeLCD_n8 000B  
                  _Tecla 0014                    tablat 0FF5              _HabilitaLCD 10C4  
                  ttemp5 0017                    ttemp6 001A                    ttemp7 001E  
                  status 0FD8                    wtemp8 0017          ___lbdiv@divisor 0006  
        ___lbdiv@counter 0008         __end_of_BorraLCD 10C4          __initialization 1046  
           __end_of_main 0C76                   ??_main 000F     __end_of_ConfiguraLCD 1084  
          __activetblptr 0002           DireccionaLCD@a 0006           EscribeLCD_n8@a 000E  
         EscribeLCD_n8@b 000A                   i2l1503 0E00                   i2l1507 0E12  
                 i2l1491 0DD8                   i2l1467 0D90                   i2l1479 0DB4  
                 _TMR0IF 7F92    __end_of_DireccionaLCD 10B0               _RetardoLCD 0F3A  
   EscribeLCD_n8@centena 000B                ??___lbdiv 0007                ??___lbmod 0003  
        ??_InicializaLCD 0006                   isa$std 0001     __end_of_EscribeLCD_c 109A  
           __pdataCOMRAM 0015             __mediumconst 0000                   tblptrh 0FF7  
                 tblptrl 0FF6                   tblptru 0FF8         ___lbdiv@dividend 0007  
        ___lbmod@divisor 0002               __accesstop 0060  __end_of__initialization 105E  
        ___lbmod@counter 0004            ___rparam_used 0001           __pcstackCOMRAM 0001  
      __end_of_EnviaDato 0FE6         ___lbdiv@quotient 0009                ?_BorraLCD 0001  
            ?_RetardoLCD 0001              RetardoLCD@a 0003       obtenerNumero@tecla 0002  
                i2u42_40 0E28                  i2u43_45 0E2A                  i2u68_47 0E06  
             ??_BorraLCD 0006             ?_HabilitaLCD 0001             _ConfiguraLCD 106C  
                __Hparam 0000                  __Lparam 0000                  ___lbdiv 0FE6  
                ___lbmod 101E             __psmallconst 0800                  __pcinit 1046  
                __ramtop 0800            _obtenerNumero 0ECA                  __ptext0 0802  
                __ptext1 0ECA                  __ptext2 0E2E                  __ptext3 10B0  
                __ptext4 0C76                  __ptext5 101E                  __ptext6 0FE6  
                __ptext7 1084                  __ptext8 109A                  __ptext9 0FA0  
  __end_of_EscribeLCD_n8 0D5C           __pintcode_body 0D5C     end_of_initialization 105E  
          __Lmediumconst 0000                  int_func 0D5C             _EscribeLCD_c 1084  
         ?_obtenerNumero 0001         ___lbmod@dividend 0003               main@Numero 0011  
            ___lbmod@rem 0005            __pidataCOMRAM 10D2    __end_of_InicializaLCD 0ECA  
              _EnviaDato 0FA0            _piezasAContar 0013      start_initialization 1046  
            __end_of_ISR 0E2E             ??_RetardoLCD 0002      EscribeLCD_n8@decena 000C  
        ??_obtenerNumero 0002      EscribeLCD_n8@unidad 000D               ?_EnviaDato 0001  
            __pbssCOMRAM 0012       __end_of_RetardoLCD 0FA0            _DireccionaLCD 109A  
              __pintcode 0008                 ?___lbdiv 0006                 ?___lbmod 0002  
            __smallconst 0800           ?_DireccionaLCD 0001                _regresiva 0012  
            ??_EnviaDato 0004                 _BorraLCD 10B0                 __Hrparam 0000  
               __Lrparam 0000            ConfiguraLCD@a 0002                 __ptext10 0F3A  
               __ptext11 10C4                 __ptext12 106C          ??_DireccionaLCD 0006  
               _interfaz 0015                 isa$xinst 0000                 int$flags 0016  
          _EscribeLCD_n8 0C76                 intlevel2 0000            ??_HabilitaLCD 0002  
          ?_ConfiguraLCD 0001    __end_of_obtenerNumero 0F3A           ?_EscribeLCD_n8 000A  
         ??_ConfiguraLCD 0002            ?_EscribeLCD_c 0001      __end_of_HabilitaLCD 10D2  
