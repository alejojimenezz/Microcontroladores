

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Wed Jul 23 18:37:04 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    23   000000                     
    24                           ; Generated 25/07/2024 GMT
    25                           ; 
    26                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F4550 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58   000FE0                     bsr             equ	4064
    59   000FE9                     fsr0            equ	4073
    60   000FEA                     fsr0h           equ	4074
    61   000FE9                     fsr0l           equ	4073
    62   000FE1                     fsr1            equ	4065
    63   000FE2                     fsr1h           equ	4066
    64   000FE1                     fsr1l           equ	4065
    65   000FD9                     fsr2            equ	4057
    66   000FDA                     fsr2h           equ	4058
    67   000FD9                     fsr2l           equ	4057
    68   000FEF                     indf0           equ	4079
    69   000FE7                     indf1           equ	4071
    70   000FDF                     indf2           equ	4063
    71   000FF2                     intcon          equ	4082
    72   000000                     nvmcon          equ	0
    73   000FF9                     pcl             equ	4089
    74   000FFA                     pclath          equ	4090
    75   000FFB                     pclatu          equ	4091
    76   000FEB                     plusw0          equ	4075
    77   000FE3                     plusw1          equ	4067
    78   000FDB                     plusw2          equ	4059
    79   000FED                     postdec0        equ	4077
    80   000FE5                     postdec1        equ	4069
    81   000FDD                     postdec2        equ	4061
    82   000FEE                     postinc0        equ	4078
    83   000FE6                     postinc1        equ	4070
    84   000FDE                     postinc2        equ	4062
    85   000FEC                     preinc0         equ	4076
    86   000FE4                     preinc1         equ	4068
    87   000FDC                     preinc2         equ	4060
    88   000FF3                     prod            equ	4083
    89   000FF4                     prodh           equ	4084
    90   000FF3                     prodl           equ	4083
    91   000FD8                     status          equ	4056
    92   000FF5                     tablat          equ	4085
    93   000FF6                     tblptr          equ	4086
    94   000FF7                     tblptrh         equ	4087
    95   000FF6                     tblptrl         equ	4086
    96   000FF8                     tblptru         equ	4088
    97   000FFD                     tosl            equ	4093
    98   000FE8                     wreg            equ	4072
    99   000F62                     SPPDATA         equ	3938	;# 
   100   000F63                     SPPCFG          equ	3939	;# 
   101   000F64                     SPPEPS          equ	3940	;# 
   102   000F65                     SPPCON          equ	3941	;# 
   103   000F66                     UFRM            equ	3942	;# 
   104   000F66                     UFRML           equ	3942	;# 
   105   000F67                     UFRMH           equ	3943	;# 
   106   000F68                     UIR             equ	3944	;# 
   107   000F69                     UIE             equ	3945	;# 
   108   000F6A                     UEIR            equ	3946	;# 
   109   000F6B                     UEIE            equ	3947	;# 
   110   000F6C                     USTAT           equ	3948	;# 
   111   000F6D                     UCON            equ	3949	;# 
   112   000F6E                     UADDR           equ	3950	;# 
   113   000F6F                     UCFG            equ	3951	;# 
   114   000F70                     UEP0            equ	3952	;# 
   115   000F71                     UEP1            equ	3953	;# 
   116   000F72                     UEP2            equ	3954	;# 
   117   000F73                     UEP3            equ	3955	;# 
   118   000F74                     UEP4            equ	3956	;# 
   119   000F75                     UEP5            equ	3957	;# 
   120   000F76                     UEP6            equ	3958	;# 
   121   000F77                     UEP7            equ	3959	;# 
   122   000F78                     UEP8            equ	3960	;# 
   123   000F79                     UEP9            equ	3961	;# 
   124   000F7A                     UEP10           equ	3962	;# 
   125   000F7B                     UEP11           equ	3963	;# 
   126   000F7C                     UEP12           equ	3964	;# 
   127   000F7D                     UEP13           equ	3965	;# 
   128   000F7E                     UEP14           equ	3966	;# 
   129   000F7F                     UEP15           equ	3967	;# 
   130   000F80                     PORTA           equ	3968	;# 
   131   000F81                     PORTB           equ	3969	;# 
   132   000F82                     PORTC           equ	3970	;# 
   133   000F83                     PORTD           equ	3971	;# 
   134   000F84                     PORTE           equ	3972	;# 
   135   000F89                     LATA            equ	3977	;# 
   136   000F8A                     LATB            equ	3978	;# 
   137   000F8B                     LATC            equ	3979	;# 
   138   000F8C                     LATD            equ	3980	;# 
   139   000F8D                     LATE            equ	3981	;# 
   140   000F92                     TRISA           equ	3986	;# 
   141   000F92                     DDRA            equ	3986	;# 
   142   000F93                     TRISB           equ	3987	;# 
   143   000F93                     DDRB            equ	3987	;# 
   144   000F94                     TRISC           equ	3988	;# 
   145   000F94                     DDRC            equ	3988	;# 
   146   000F95                     TRISD           equ	3989	;# 
   147   000F95                     DDRD            equ	3989	;# 
   148   000F96                     TRISE           equ	3990	;# 
   149   000F96                     DDRE            equ	3990	;# 
   150   000F9B                     OSCTUNE         equ	3995	;# 
   151   000F9D                     PIE1            equ	3997	;# 
   152   000F9E                     PIR1            equ	3998	;# 
   153   000F9F                     IPR1            equ	3999	;# 
   154   000FA0                     PIE2            equ	4000	;# 
   155   000FA1                     PIR2            equ	4001	;# 
   156   000FA2                     IPR2            equ	4002	;# 
   157   000FA6                     EECON1          equ	4006	;# 
   158   000FA7                     EECON2          equ	4007	;# 
   159   000FA8                     EEDATA          equ	4008	;# 
   160   000FA9                     EEADR           equ	4009	;# 
   161   000FAB                     RCSTA           equ	4011	;# 
   162   000FAB                     RCSTA1          equ	4011	;# 
   163   000FAC                     TXSTA           equ	4012	;# 
   164   000FAC                     TXSTA1          equ	4012	;# 
   165   000FAD                     TXREG           equ	4013	;# 
   166   000FAD                     TXREG1          equ	4013	;# 
   167   000FAE                     RCREG           equ	4014	;# 
   168   000FAE                     RCREG1          equ	4014	;# 
   169   000FAF                     SPBRG           equ	4015	;# 
   170   000FAF                     SPBRG1          equ	4015	;# 
   171   000FB0                     SPBRGH          equ	4016	;# 
   172   000FB1                     T3CON           equ	4017	;# 
   173   000FB2                     TMR3            equ	4018	;# 
   174   000FB2                     TMR3L           equ	4018	;# 
   175   000FB3                     TMR3H           equ	4019	;# 
   176   000FB4                     CMCON           equ	4020	;# 
   177   000FB5                     CVRCON          equ	4021	;# 
   178   000FB6                     ECCP1AS         equ	4022	;# 
   179   000FB6                     CCP1AS          equ	4022	;# 
   180   000FB7                     ECCP1DEL        equ	4023	;# 
   181   000FB7                     CCP1DEL         equ	4023	;# 
   182   000FB8                     BAUDCON         equ	4024	;# 
   183   000FB8                     BAUDCTL         equ	4024	;# 
   184   000FBA                     CCP2CON         equ	4026	;# 
   185   000FBB                     CCPR2           equ	4027	;# 
   186   000FBB                     CCPR2L          equ	4027	;# 
   187   000FBC                     CCPR2H          equ	4028	;# 
   188   000FBD                     CCP1CON         equ	4029	;# 
   189   000FBD                     ECCP1CON        equ	4029	;# 
   190   000FBE                     CCPR1           equ	4030	;# 
   191   000FBE                     CCPR1L          equ	4030	;# 
   192   000FBF                     CCPR1H          equ	4031	;# 
   193   000FC0                     ADCON2          equ	4032	;# 
   194   000FC1                     ADCON1          equ	4033	;# 
   195   000FC2                     ADCON0          equ	4034	;# 
   196   000FC3                     ADRES           equ	4035	;# 
   197   000FC3                     ADRESL          equ	4035	;# 
   198   000FC4                     ADRESH          equ	4036	;# 
   199   000FC5                     SSPCON2         equ	4037	;# 
   200   000FC6                     SSPCON1         equ	4038	;# 
   201   000FC7                     SSPSTAT         equ	4039	;# 
   202   000FC8                     SSPADD          equ	4040	;# 
   203   000FC9                     SSPBUF          equ	4041	;# 
   204   000FCA                     T2CON           equ	4042	;# 
   205   000FCB                     PR2             equ	4043	;# 
   206   000FCB                     MEMCON          equ	4043	;# 
   207   000FCC                     TMR2            equ	4044	;# 
   208   000FCD                     T1CON           equ	4045	;# 
   209   000FCE                     TMR1            equ	4046	;# 
   210   000FCE                     TMR1L           equ	4046	;# 
   211   000FCF                     TMR1H           equ	4047	;# 
   212   000FD0                     RCON            equ	4048	;# 
   213   000FD1                     WDTCON          equ	4049	;# 
   214   000FD2                     HLVDCON         equ	4050	;# 
   215   000FD2                     LVDCON          equ	4050	;# 
   216   000FD3                     OSCCON          equ	4051	;# 
   217   000FD5                     T0CON           equ	4053	;# 
   218   000FD6                     TMR0            equ	4054	;# 
   219   000FD6                     TMR0L           equ	4054	;# 
   220   000FD7                     TMR0H           equ	4055	;# 
   221   000FD8                     STATUS          equ	4056	;# 
   222   000FD9                     FSR2            equ	4057	;# 
   223   000FD9                     FSR2L           equ	4057	;# 
   224   000FDA                     FSR2H           equ	4058	;# 
   225   000FDB                     PLUSW2          equ	4059	;# 
   226   000FDC                     PREINC2         equ	4060	;# 
   227   000FDD                     POSTDEC2        equ	4061	;# 
   228   000FDE                     POSTINC2        equ	4062	;# 
   229   000FDF                     INDF2           equ	4063	;# 
   230   000FE0                     BSR             equ	4064	;# 
   231   000FE1                     FSR1            equ	4065	;# 
   232   000FE1                     FSR1L           equ	4065	;# 
   233   000FE2                     FSR1H           equ	4066	;# 
   234   000FE3                     PLUSW1          equ	4067	;# 
   235   000FE4                     PREINC1         equ	4068	;# 
   236   000FE5                     POSTDEC1        equ	4069	;# 
   237   000FE6                     POSTINC1        equ	4070	;# 
   238   000FE7                     INDF1           equ	4071	;# 
   239   000FE8                     WREG            equ	4072	;# 
   240   000FE9                     FSR0            equ	4073	;# 
   241   000FE9                     FSR0L           equ	4073	;# 
   242   000FEA                     FSR0H           equ	4074	;# 
   243   000FEB                     PLUSW0          equ	4075	;# 
   244   000FEC                     PREINC0         equ	4076	;# 
   245   000FED                     POSTDEC0        equ	4077	;# 
   246   000FEE                     POSTINC0        equ	4078	;# 
   247   000FEF                     INDF0           equ	4079	;# 
   248   000FF0                     INTCON3         equ	4080	;# 
   249   000FF1                     INTCON2         equ	4081	;# 
   250   000FF2                     INTCON          equ	4082	;# 
   251   000FF3                     PROD            equ	4083	;# 
   252   000FF3                     PRODL           equ	4083	;# 
   253   000FF4                     PRODH           equ	4084	;# 
   254   000FF5                     TABLAT          equ	4085	;# 
   255   000FF6                     TBLPTR          equ	4086	;# 
   256   000FF6                     TBLPTRL         equ	4086	;# 
   257   000FF7                     TBLPTRH         equ	4087	;# 
   258   000FF8                     TBLPTRU         equ	4088	;# 
   259   000FF9                     PCLAT           equ	4089	;# 
   260   000FF9                     PC              equ	4089	;# 
   261   000FF9                     PCL             equ	4089	;# 
   262   000FFA                     PCLATH          equ	4090	;# 
   263   000FFB                     PCLATU          equ	4091	;# 
   264   000FFC                     STKPTR          equ	4092	;# 
   265   000FFD                     TOS             equ	4093	;# 
   266   000FFD                     TOSL            equ	4093	;# 
   267   000FFE                     TOSH            equ	4094	;# 
   268   000FFF                     TOSU            equ	4095	;# 
   269                           
   270                           	psect	idataCOMRAM
   271   000A46                     __pidataCOMRAM:
   272                           	callstack 0
   273                           
   274                           ;initializer for _interfaz
   275   000A46  08                 	db	8
   276   007C4C                     _LATA4          set	31820
   277   007C4B                     _LATA3          set	31819
   278   000F8C                     _LATDbits       set	3980
   279   000F89                     _LATAbits       set	3977
   280   000F92                     _TRISAbits      set	3986
   281   000F95                     _TRISDbits      set	3989
   282   000F8C                     _LATD           set	3980
   283                           
   284                           ; #config settings
   285                           
   286                           	psect	cinit
   287   0009C4                     __pcinit:
   288                           	callstack 0
   289   0009C4                     start_initialization:
   290                           	callstack 0
   291   0009C4                     __initialization:
   292                           	callstack 0
   293                           
   294                           ; Initialize objects allocated to COMRAM (1 bytes)
   295                           ; load TBLPTR registers with __pidataCOMRAM
   296   0009C4  0E46               	movlw	low __pidataCOMRAM
   297   0009C6  6EF6               	movwf	tblptrl,c
   298   0009C8  0E0A               	movlw	high __pidataCOMRAM
   299   0009CA  6EF7               	movwf	tblptrh,c
   300   0009CC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   301   0009CE  6EF8               	movwf	tblptru,c
   302   0009D0  0009               	tblrd		*+	;fetch initializer
   303   0009D2  CFF5 F008          	movff	tablat,__pdataCOMRAM
   304   0009D6                     end_of_initialization:
   305                           	callstack 0
   306   0009D6                     __end_of__initialization:
   307                           	callstack 0
   308   0009D6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   309   0009D8  6EF8               	movwf	tblptru,c
   310   0009DA  0100               	movlb	0
   311   0009DC  EF4F  F004         	goto	_main	;jump to C main() function
   312                           
   313                           	psect	dataCOMRAM
   314   000008                     __pdataCOMRAM:
   315                           	callstack 0
   316   000008                     _interfaz:
   317                           	callstack 0
   318   000008                     	ds	1
   319                           
   320                           	psect	cstackCOMRAM
   321   000001                     __pcstackCOMRAM:
   322                           	callstack 0
   323   000001                     ConfiguraLCD@a:
   324                           	callstack 0
   325   000001                     ??_RetardoLCD:
   326   000001                     
   327                           ; 1 bytes @ 0x0
   328   000001                     	ds	1
   329   000002                     RetardoLCD@a:
   330                           	callstack 0
   331                           
   332                           ; 1 bytes @ 0x1
   333   000002                     	ds	1
   334   000003                     ??_EnviaDato:
   335                           
   336                           ; 1 bytes @ 0x2
   337   000003                     	ds	1
   338   000004                     EnviaDato@a:
   339                           	callstack 0
   340                           
   341                           ; 1 bytes @ 0x3
   342   000004                     	ds	1
   343   000005                     EscribeLCD_c@a:
   344                           	callstack 0
   345   000005                     DireccionaLCD@a:
   346                           	callstack 0
   347   000005                     
   348                           ; 1 bytes @ 0x4
   349   000005                     	ds	1
   350   000006                     ??_main:
   351                           
   352                           ; 1 bytes @ 0x5
   353   000006                     	ds	2
   354                           
   355 ;;
   356 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   357 ;;
   358 ;; *************** function _main *****************
   359 ;; Defined at:
   360 ;;		line 21 in file "PruebaLCD.c"
   361 ;; Parameters:    Size  Location     Type
   362 ;;		None
   363 ;; Auto vars:     Size  Location     Type
   364 ;;		None
   365 ;; Return value:  Size  Location     Type
   366 ;;                  1    wreg      void 
   367 ;; Registers used:
   368 ;;		wreg, status,2, status,0, cstack
   369 ;; Tracked objects:
   370 ;;		On entry : 0/0
   371 ;;		On exit  : 0/0
   372 ;;		Unchanged: 0/0
   373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   374 ;;      Params:         0       0       0       0       0       0       0       0       0
   375 ;;      Locals:         0       0       0       0       0       0       0       0       0
   376 ;;      Temps:          2       0       0       0       0       0       0       0       0
   377 ;;      Totals:         2       0       0       0       0       0       0       0       0
   378 ;;Total ram usage:        2 bytes
   379 ;; Hardware stack levels required when called: 4
   380 ;; This function calls:
   381 ;;		_ConfiguraLCD
   382 ;;		_DireccionaLCD
   383 ;;		_EscribeLCD_c
   384 ;;		_InicializaLCD
   385 ;; This function is called by:
   386 ;;		Startup code after reset
   387 ;; This function uses a non-reentrant model
   388 ;;
   389                           
   390                           	psect	text0
   391   00089E                     __ptext0:
   392                           	callstack 0
   393   00089E                     _main:
   394                           	callstack 27
   395                           
   396                           ;PruebaLCD.c: 29: TRISDbits.TRISD4 = 0;
   397                           
   398                           ;incstack = 0
   399   00089E  9895               	bcf	149,4,c	;volatile
   400                           
   401                           ;PruebaLCD.c: 30: TRISDbits.TRISD5 = 0;
   402   0008A0  9A95               	bcf	149,5,c	;volatile
   403                           
   404                           ;PruebaLCD.c: 31: TRISDbits.TRISD6 = 0;
   405   0008A2  9C95               	bcf	149,6,c	;volatile
   406                           
   407                           ;PruebaLCD.c: 32: TRISDbits.TRISD7 = 0;
   408   0008A4  9E95               	bcf	149,7,c	;volatile
   409                           
   410                           ;PruebaLCD.c: 34: TRISAbits.TRISA3 = 0;
   411   0008A6  9692               	bcf	146,3,c	;volatile
   412                           
   413                           ;PruebaLCD.c: 35: TRISAbits.TRISA4 = 0;
   414   0008A8  9892               	bcf	146,4,c	;volatile
   415                           
   416                           ;PruebaLCD.c: 37: LATAbits.LATA3 = 0;
   417   0008AA  9689               	bcf	137,3,c	;volatile
   418                           
   419                           ;PruebaLCD.c: 38: LATAbits.LATA4 = 0;
   420   0008AC  9889               	bcf	137,4,c	;volatile
   421                           
   422                           ;PruebaLCD.c: 39: LATDbits.LATD4 = 0;
   423   0008AE  988C               	bcf	140,4,c	;volatile
   424                           
   425                           ;PruebaLCD.c: 40: LATDbits.LATD5 = 0;
   426   0008B0  9A8C               	bcf	140,5,c	;volatile
   427                           
   428                           ;PruebaLCD.c: 41: LATDbits.LATD6 = 0;
   429   0008B2  9C8C               	bcf	140,6,c	;volatile
   430                           
   431                           ;PruebaLCD.c: 42: LATDbits.LATD7 = 0;
   432   0008B4  9E8C               	bcf	140,7,c	;volatile
   433                           
   434                           ;PruebaLCD.c: 44: _delay((unsigned long)((1500)*(1000000/4000.0)));
   435   0008B6  0E02               	movlw	2
   436   0008B8  6E07               	movwf	(??_main+1)^0,c
   437   0008BA  0EE7               	movlw	231
   438   0008BC  6E06               	movwf	??_main^0,c
   439   0008BE  0E00               	movlw	0
   440   0008C0                     u97:
   441   0008C0  2EE8               	decfsz	wreg,f,c
   442   0008C2  D7FE               	bra	u97
   443   0008C4  2E06               	decfsz	??_main^0,f,c
   444   0008C6  D7FC               	bra	u97
   445   0008C8  2E07               	decfsz	(??_main+1)^0,f,c
   446   0008CA  D7FA               	bra	u97
   447   0008CC  D000               	nop2	
   448                           
   449                           ;PruebaLCD.c: 45: ConfiguraLCD(4);
   450   0008CE  0E04               	movlw	4
   451   0008D0  ECF0  F004         	call	_ConfiguraLCD
   452                           
   453                           ;PruebaLCD.c: 46: InicializaLCD();
   454   0008D4  EC01  F004         	call	_InicializaLCD	;wreg free
   455                           
   456                           ;PruebaLCD.c: 49: EscribeLCD_c('H');
   457   0008D8  0E48               	movlw	72
   458   0008DA  ECFC  F004         	call	_EscribeLCD_c
   459                           
   460                           ;PruebaLCD.c: 50: EscribeLCD_c('o');
   461   0008DE  0E6F               	movlw	111
   462   0008E0  ECFC  F004         	call	_EscribeLCD_c
   463                           
   464                           ;PruebaLCD.c: 51: EscribeLCD_c('l');
   465   0008E4  0E6C               	movlw	108
   466   0008E6  ECFC  F004         	call	_EscribeLCD_c
   467                           
   468                           ;PruebaLCD.c: 52: EscribeLCD_c('a');
   469   0008EA  0E61               	movlw	97
   470   0008EC  ECFC  F004         	call	_EscribeLCD_c
   471                           
   472                           ;PruebaLCD.c: 53: EscribeLCD_c(' ');
   473   0008F0  0E20               	movlw	32
   474   0008F2  ECFC  F004         	call	_EscribeLCD_c
   475                           
   476                           ;PruebaLCD.c: 54: EscribeLCD_c('m');
   477   0008F6  0E6D               	movlw	109
   478   0008F8  ECFC  F004         	call	_EscribeLCD_c
   479                           
   480                           ;PruebaLCD.c: 55: EscribeLCD_c('u');
   481   0008FC  0E75               	movlw	117
   482   0008FE  ECFC  F004         	call	_EscribeLCD_c
   483                           
   484                           ;PruebaLCD.c: 56: EscribeLCD_c('n');
   485   000902  0E6E               	movlw	110
   486   000904  ECFC  F004         	call	_EscribeLCD_c
   487                           
   488                           ;PruebaLCD.c: 57: EscribeLCD_c('d');
   489   000908  0E64               	movlw	100
   490   00090A  ECFC  F004         	call	_EscribeLCD_c
   491                           
   492                           ;PruebaLCD.c: 58: EscribeLCD_c('o');
   493   00090E  0E6F               	movlw	111
   494   000910  ECFC  F004         	call	_EscribeLCD_c
   495                           
   496                           ;PruebaLCD.c: 60: DireccionaLCD(0xC0);
   497   000914  0EC0               	movlw	192
   498   000916  EC07  F005         	call	_DireccionaLCD
   499                           
   500                           ;PruebaLCD.c: 61: EscribeLCD_c('7');
   501   00091A  0E37               	movlw	55
   502   00091C  ECFC  F004         	call	_EscribeLCD_c
   503                           
   504                           ;PruebaLCD.c: 62: EscribeLCD_c(';');
   505   000920  0E3B               	movlw	59
   506   000922  ECFC  F004         	call	_EscribeLCD_c
   507   000926                     l124:
   508   000926  D7FF               	goto	l124
   509   000928                     __end_of_main:
   510                           	callstack 0
   511                           
   512 ;; *************** function _InicializaLCD *****************
   513 ;; Defined at:
   514 ;;		line 71 in file "LibLCDXC8.h"
   515 ;; Parameters:    Size  Location     Type
   516 ;;		None
   517 ;; Auto vars:     Size  Location     Type
   518 ;;		None
   519 ;; Return value:  Size  Location     Type
   520 ;;                  1    wreg      void 
   521 ;; Registers used:
   522 ;;		wreg, status,2, status,0, cstack
   523 ;; Tracked objects:
   524 ;;		On entry : 0/0
   525 ;;		On exit  : 0/0
   526 ;;		Unchanged: 0/0
   527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   528 ;;      Params:         0       0       0       0       0       0       0       0       0
   529 ;;      Locals:         0       0       0       0       0       0       0       0       0
   530 ;;      Temps:          0       0       0       0       0       0       0       0       0
   531 ;;      Totals:         0       0       0       0       0       0       0       0       0
   532 ;;Total ram usage:        0 bytes
   533 ;; Hardware stack levels used: 1
   534 ;; Hardware stack levels required when called: 3
   535 ;; This function calls:
   536 ;;		_BorraLCD
   537 ;;		_EnviaDato
   538 ;;		_HabilitaLCD
   539 ;;		_RetardoLCD
   540 ;; This function is called by:
   541 ;;		_main
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           	psect	text1
   546   000802                     __ptext1:
   547                           	callstack 0
   548   000802                     _InicializaLCD:
   549                           	callstack 27
   550                           
   551                           ;LibLCDXC8.h: 73: LATA3=0;
   552                           
   553                           ;incstack = 0
   554   000802  9689               	bcf	3977,3,c	;volatile
   555                           
   556                           ;LibLCDXC8.h: 74: if(interfaz==4)
   557   000804  0E04               	movlw	4
   558   000806  1808               	xorwf	_interfaz^0,w,c
   559   000808  A4D8               	btfss	status,2,c
   560   00080A  D004               	goto	l927
   561                           
   562                           ;LibLCDXC8.h: 75: LATD=(LATD & 0b00001111) | 0x30;
   563   00080C  508C               	movf	140,w,c	;volatile
   564   00080E  0B0F               	andlw	15
   565   000810  0930               	iorlw	48
   566   000812  D001               	goto	L1
   567   000814                     l927:
   568                           
   569                           ;LibLCDXC8.h: 76: else;LibLCDXC8.h: 77: LATD=0x3F;
   570   000814  0E3F               	movlw	63
   571   000816                     L1:
   572   000816  6E8C               	movwf	140,c	;volatile
   573                           
   574                           ;LibLCDXC8.h: 78: HabilitaLCD();
   575   000818  EC1C  F005         	call	_HabilitaLCD	;wreg free
   576                           
   577                           ;LibLCDXC8.h: 79: RetardoLCD(1);
   578   00081C  0E01               	movlw	1
   579   00081E  EC94  F004         	call	_RetardoLCD
   580                           
   581                           ;LibLCDXC8.h: 80: if(interfaz==4)
   582   000822  0E04               	movlw	4
   583   000824  1808               	xorwf	_interfaz^0,w,c
   584   000826  A4D8               	btfss	status,2,c
   585   000828  D004               	goto	l937
   586                           
   587                           ;LibLCDXC8.h: 81: LATD=(LATD & 0b00001111) | 0x30;
   588   00082A  508C               	movf	140,w,c	;volatile
   589   00082C  0B0F               	andlw	15
   590   00082E  0930               	iorlw	48
   591   000830  D001               	goto	L2
   592   000832                     l937:
   593                           
   594                           ;LibLCDXC8.h: 82: else;LibLCDXC8.h: 83: LATD=0x3F;
   595   000832  0E3F               	movlw	63
   596   000834                     L2:
   597   000834  6E8C               	movwf	140,c	;volatile
   598                           
   599                           ;LibLCDXC8.h: 84: HabilitaLCD();
   600   000836  EC1C  F005         	call	_HabilitaLCD	;wreg free
   601                           
   602                           ;LibLCDXC8.h: 85: RetardoLCD(3);
   603   00083A  0E03               	movlw	3
   604   00083C  EC94  F004         	call	_RetardoLCD
   605                           
   606                           ;LibLCDXC8.h: 86: if(interfaz==4)
   607   000840  0E04               	movlw	4
   608   000842  1808               	xorwf	_interfaz^0,w,c
   609   000844  A4D8               	btfss	status,2,c
   610   000846  D004               	goto	l947
   611                           
   612                           ;LibLCDXC8.h: 87: LATD=(LATD & 0b00001111) | 0x30;
   613   000848  508C               	movf	140,w,c	;volatile
   614   00084A  0B0F               	andlw	15
   615   00084C  0930               	iorlw	48
   616   00084E  D001               	goto	L3
   617   000850                     l947:
   618                           
   619                           ;LibLCDXC8.h: 88: else;LibLCDXC8.h: 89: LATD=0x3F;
   620   000850  0E3F               	movlw	63
   621   000852                     L3:
   622   000852  6E8C               	movwf	140,c	;volatile
   623                           
   624                           ;LibLCDXC8.h: 90: HabilitaLCD();
   625   000854  EC1C  F005         	call	_HabilitaLCD	;wreg free
   626                           
   627                           ;LibLCDXC8.h: 91: RetardoLCD(4);
   628   000858  0E04               	movlw	4
   629   00085A  EC94  F004         	call	_RetardoLCD
   630                           
   631                           ;LibLCDXC8.h: 92: if(interfaz==4){
   632   00085E  0E04               	movlw	4
   633   000860  1808               	xorwf	_interfaz^0,w,c
   634   000862  A4D8               	btfss	status,2,c
   635   000864  D011               	goto	l967
   636                           
   637                           ;LibLCDXC8.h: 93: LATD=(LATD & 0b00001111) | 0x20;
   638   000866  508C               	movf	140,w,c	;volatile
   639   000868  0B0F               	andlw	15
   640   00086A  0920               	iorlw	32
   641   00086C  6E8C               	movwf	140,c	;volatile
   642                           
   643                           ;LibLCDXC8.h: 94: HabilitaLCD();
   644   00086E  EC1C  F005         	call	_HabilitaLCD	;wreg free
   645                           
   646                           ;LibLCDXC8.h: 95: RetardoLCD(4);
   647   000872  0E04               	movlw	4
   648   000874  EC94  F004         	call	_RetardoLCD
   649                           
   650                           ;LibLCDXC8.h: 96: EnviaDato(0x2F);
   651   000878  0E2F               	movlw	47
   652   00087A  ECBF  F004         	call	_EnviaDato
   653                           
   654                           ;LibLCDXC8.h: 97: HabilitaLCD();
   655   00087E  EC1C  F005         	call	_HabilitaLCD	;wreg free
   656                           
   657                           ;LibLCDXC8.h: 98: RetardoLCD(4);
   658   000882  0E04               	movlw	4
   659   000884  EC94  F004         	call	_RetardoLCD
   660   000888                     l967:
   661                           
   662                           ;LibLCDXC8.h: 99: };LibLCDXC8.h: 100: BorraLCD();
   663   000888  EC12  F005         	call	_BorraLCD	;wreg free
   664                           
   665                           ;LibLCDXC8.h: 101: EnviaDato(0xF);
   666   00088C  0E0F               	movlw	15
   667   00088E  ECBF  F004         	call	_EnviaDato
   668                           
   669                           ;LibLCDXC8.h: 102: HabilitaLCD();
   670   000892  EC1C  F005         	call	_HabilitaLCD	;wreg free
   671                           
   672                           ;LibLCDXC8.h: 103: RetardoLCD(4);
   673   000896  0E04               	movlw	4
   674   000898  EC94  F004         	call	_RetardoLCD
   675   00089C  0012               	return		;funcret
   676   00089E                     __end_of_InicializaLCD:
   677                           	callstack 0
   678                           
   679 ;; *************** function _BorraLCD *****************
   680 ;; Defined at:
   681 ;;		line 112 in file "LibLCDXC8.h"
   682 ;; Parameters:    Size  Location     Type
   683 ;;		None
   684 ;; Auto vars:     Size  Location     Type
   685 ;;		None
   686 ;; Return value:  Size  Location     Type
   687 ;;                  1    wreg      void 
   688 ;; Registers used:
   689 ;;		wreg, status,2, status,0, cstack
   690 ;; Tracked objects:
   691 ;;		On entry : 0/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   695 ;;      Params:         0       0       0       0       0       0       0       0       0
   696 ;;      Locals:         0       0       0       0       0       0       0       0       0
   697 ;;      Temps:          0       0       0       0       0       0       0       0       0
   698 ;;      Totals:         0       0       0       0       0       0       0       0       0
   699 ;;Total ram usage:        0 bytes
   700 ;; Hardware stack levels used: 1
   701 ;; Hardware stack levels required when called: 2
   702 ;; This function calls:
   703 ;;		_EnviaDato
   704 ;;		_HabilitaLCD
   705 ;;		_RetardoLCD
   706 ;; This function is called by:
   707 ;;		_InicializaLCD
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           	psect	text2
   712   000A24                     __ptext2:
   713                           	callstack 0
   714   000A24                     _BorraLCD:
   715                           	callstack 27
   716                           
   717                           ;LibLCDXC8.h: 114: LATA3=0;
   718                           
   719                           ;incstack = 0
   720   000A24  9689               	bcf	3977,3,c	;volatile
   721                           
   722                           ;LibLCDXC8.h: 115: EnviaDato(0x01);
   723   000A26  0E01               	movlw	1
   724   000A28  ECBF  F004         	call	_EnviaDato
   725                           
   726                           ;LibLCDXC8.h: 116: HabilitaLCD();
   727   000A2C  EC1C  F005         	call	_HabilitaLCD	;wreg free
   728                           
   729                           ;LibLCDXC8.h: 117: RetardoLCD(2);
   730   000A30  0E02               	movlw	2
   731   000A32  EC94  F004         	call	_RetardoLCD
   732   000A36  0012               	return		;funcret
   733   000A38                     __end_of_BorraLCD:
   734                           	callstack 0
   735                           
   736 ;; *************** function _EscribeLCD_c *****************
   737 ;; Defined at:
   738 ;;		line 136 in file "LibLCDXC8.h"
   739 ;; Parameters:    Size  Location     Type
   740 ;;  a               1    wreg     unsigned char 
   741 ;; Auto vars:     Size  Location     Type
   742 ;;  a               1    4[COMRAM] unsigned char 
   743 ;; Return value:  Size  Location     Type
   744 ;;                  1    wreg      void 
   745 ;; Registers used:
   746 ;;		wreg, status,2, status,0, cstack
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   752 ;;      Params:         0       0       0       0       0       0       0       0       0
   753 ;;      Locals:         1       0       0       0       0       0       0       0       0
   754 ;;      Temps:          0       0       0       0       0       0       0       0       0
   755 ;;      Totals:         1       0       0       0       0       0       0       0       0
   756 ;;Total ram usage:        1 bytes
   757 ;; Hardware stack levels used: 1
   758 ;; Hardware stack levels required when called: 2
   759 ;; This function calls:
   760 ;;		_EnviaDato
   761 ;;		_HabilitaLCD
   762 ;;		_RetardoLCD
   763 ;; This function is called by:
   764 ;;		_main
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768                           	psect	text3
   769   0009F8                     __ptext3:
   770                           	callstack 0
   771   0009F8                     _EscribeLCD_c:
   772                           	callstack 28
   773                           
   774                           ;incstack = 0
   775                           ;EscribeLCD_c@a stored from wreg
   776   0009F8  6E05               	movwf	EscribeLCD_c@a^0,c
   777                           
   778                           ;LibLCDXC8.h: 140: LATA3=1;
   779   0009FA  8689               	bsf	3977,3,c	;volatile
   780                           
   781                           ;LibLCDXC8.h: 141: EnviaDato(a);
   782   0009FC  5005               	movf	EscribeLCD_c@a^0,w,c
   783   0009FE  ECBF  F004         	call	_EnviaDato
   784                           
   785                           ;LibLCDXC8.h: 142: HabilitaLCD();
   786   000A02  EC1C  F005         	call	_HabilitaLCD	;wreg free
   787                           
   788                           ;LibLCDXC8.h: 143: RetardoLCD(4);
   789   000A06  0E04               	movlw	4
   790   000A08  EC94  F004         	call	_RetardoLCD
   791   000A0C  0012               	return		;funcret
   792   000A0E                     __end_of_EscribeLCD_c:
   793                           	callstack 0
   794                           
   795 ;; *************** function _DireccionaLCD *****************
   796 ;; Defined at:
   797 ;;		line 238 in file "LibLCDXC8.h"
   798 ;; Parameters:    Size  Location     Type
   799 ;;  a               1    wreg     unsigned char 
   800 ;; Auto vars:     Size  Location     Type
   801 ;;  a               1    4[COMRAM] unsigned char 
   802 ;; Return value:  Size  Location     Type
   803 ;;                  1    wreg      void 
   804 ;; Registers used:
   805 ;;		wreg, status,2, status,0, cstack
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   811 ;;      Params:         0       0       0       0       0       0       0       0       0
   812 ;;      Locals:         1       0       0       0       0       0       0       0       0
   813 ;;      Temps:          0       0       0       0       0       0       0       0       0
   814 ;;      Totals:         1       0       0       0       0       0       0       0       0
   815 ;;Total ram usage:        1 bytes
   816 ;; Hardware stack levels used: 1
   817 ;; Hardware stack levels required when called: 2
   818 ;; This function calls:
   819 ;;		_EnviaDato
   820 ;;		_HabilitaLCD
   821 ;;		_RetardoLCD
   822 ;; This function is called by:
   823 ;;		_main
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           	psect	text4
   828   000A0E                     __ptext4:
   829                           	callstack 0
   830   000A0E                     _DireccionaLCD:
   831                           	callstack 28
   832                           
   833                           ;incstack = 0
   834                           ;DireccionaLCD@a stored from wreg
   835   000A0E  6E05               	movwf	DireccionaLCD@a^0,c
   836                           
   837                           ;LibLCDXC8.h: 241: LATA3=0;
   838   000A10  9689               	bcf	3977,3,c	;volatile
   839                           
   840                           ;LibLCDXC8.h: 242: EnviaDato(a);
   841   000A12  5005               	movf	DireccionaLCD@a^0,w,c
   842   000A14  ECBF  F004         	call	_EnviaDato
   843                           
   844                           ;LibLCDXC8.h: 243: HabilitaLCD();
   845   000A18  EC1C  F005         	call	_HabilitaLCD	;wreg free
   846                           
   847                           ;LibLCDXC8.h: 244: RetardoLCD(4);
   848   000A1C  0E04               	movlw	4
   849   000A1E  EC94  F004         	call	_RetardoLCD
   850   000A22  0012               	return		;funcret
   851   000A24                     __end_of_DireccionaLCD:
   852                           	callstack 0
   853                           
   854 ;; *************** function _EnviaDato *****************
   855 ;; Defined at:
   856 ;;		line 59 in file "LibLCDXC8.h"
   857 ;; Parameters:    Size  Location     Type
   858 ;;  a               1    wreg     unsigned char 
   859 ;; Auto vars:     Size  Location     Type
   860 ;;  a               1    3[COMRAM] unsigned char 
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, status,2, status,0, cstack
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   870 ;;      Params:         0       0       0       0       0       0       0       0       0
   871 ;;      Locals:         1       0       0       0       0       0       0       0       0
   872 ;;      Temps:          1       0       0       0       0       0       0       0       0
   873 ;;      Totals:         2       0       0       0       0       0       0       0       0
   874 ;;Total ram usage:        2 bytes
   875 ;; Hardware stack levels used: 1
   876 ;; Hardware stack levels required when called: 1
   877 ;; This function calls:
   878 ;;		_HabilitaLCD
   879 ;;		_RetardoLCD
   880 ;; This function is called by:
   881 ;;		_InicializaLCD
   882 ;;		_BorraLCD
   883 ;;		_EscribeLCD_c
   884 ;;		_DireccionaLCD
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           	psect	text5
   889   00097E                     __ptext5:
   890                           	callstack 0
   891   00097E                     _EnviaDato:
   892                           	callstack 28
   893                           
   894                           ;incstack = 0
   895                           ;EnviaDato@a stored from wreg
   896   00097E  6E04               	movwf	EnviaDato@a^0,c
   897                           
   898                           ;LibLCDXC8.h: 60: if(interfaz==4){
   899   000980  0E04               	movlw	4
   900   000982  1808               	xorwf	_interfaz^0,w,c
   901   000984  A4D8               	btfss	status,2,c
   902   000986  D017               	goto	l905
   903                           
   904                           ;LibLCDXC8.h: 61: LATD=(LATD & 0b00001111) | (a & 0b11110000);
   905   000988  C004  F003         	movff	EnviaDato@a,??_EnviaDato
   906   00098C  0EF0               	movlw	240
   907   00098E  1603               	andwf	??_EnviaDato^0,f,c
   908   000990  508C               	movf	140,w,c	;volatile
   909   000992  0B0F               	andlw	15
   910   000994  1003               	iorwf	??_EnviaDato^0,w,c
   911   000996  6E8C               	movwf	140,c	;volatile
   912                           
   913                           ;LibLCDXC8.h: 62: HabilitaLCD();
   914   000998  EC1C  F005         	call	_HabilitaLCD	;wreg free
   915                           
   916                           ;LibLCDXC8.h: 63: RetardoLCD(1);
   917   00099C  0E01               	movlw	1
   918   00099E  EC94  F004         	call	_RetardoLCD
   919                           
   920                           ;LibLCDXC8.h: 64: LATD=(LATD & 0b00001111) | (a<<4);
   921   0009A2  C004  F003         	movff	EnviaDato@a,??_EnviaDato
   922   0009A6  3A03               	swapf	??_EnviaDato^0,f,c
   923   0009A8  0EF0               	movlw	240
   924   0009AA  1603               	andwf	??_EnviaDato^0,f,c
   925   0009AC  508C               	movf	140,w,c	;volatile
   926   0009AE  0B0F               	andlw	15
   927   0009B0  1003               	iorwf	??_EnviaDato^0,w,c
   928   0009B2  6E8C               	movwf	140,c	;volatile
   929                           
   930                           ;LibLCDXC8.h: 67: }else if(interfaz==8){
   931   0009B4  0012               	return	
   932   0009B6                     l905:
   933   0009B6  0E08               	movlw	8
   934   0009B8  1808               	xorwf	_interfaz^0,w,c
   935   0009BA  A4D8               	btfss	status,2,c
   936   0009BC  0012               	return	
   937                           
   938                           ;LibLCDXC8.h: 68: LATD=a;
   939   0009BE  C004  FF8C         	movff	EnviaDato@a,3980	;volatile
   940   0009C2  0012               	return		;funcret
   941   0009C4                     __end_of_EnviaDato:
   942                           	callstack 0
   943                           
   944 ;; *************** function _RetardoLCD *****************
   945 ;; Defined at:
   946 ;;		line 274 in file "LibLCDXC8.h"
   947 ;; Parameters:    Size  Location     Type
   948 ;;  a               1    wreg     unsigned char 
   949 ;; Auto vars:     Size  Location     Type
   950 ;;  a               1    1[COMRAM] unsigned char 
   951 ;; Return value:  Size  Location     Type
   952 ;;                  1    wreg      void 
   953 ;; Registers used:
   954 ;;		wreg, status,2, status,0
   955 ;; Tracked objects:
   956 ;;		On entry : 0/0
   957 ;;		On exit  : 0/0
   958 ;;		Unchanged: 0/0
   959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   960 ;;      Params:         0       0       0       0       0       0       0       0       0
   961 ;;      Locals:         1       0       0       0       0       0       0       0       0
   962 ;;      Temps:          1       0       0       0       0       0       0       0       0
   963 ;;      Totals:         2       0       0       0       0       0       0       0       0
   964 ;;Total ram usage:        2 bytes
   965 ;; Hardware stack levels used: 1
   966 ;; This function calls:
   967 ;;		Nothing
   968 ;; This function is called by:
   969 ;;		_EnviaDato
   970 ;;		_InicializaLCD
   971 ;;		_BorraLCD
   972 ;;		_EscribeLCD_c
   973 ;;		_DireccionaLCD
   974 ;; This function uses a non-reentrant model
   975 ;;
   976                           
   977                           	psect	text6
   978   000928                     __ptext6:
   979                           	callstack 0
   980   000928                     _RetardoLCD:
   981                           	callstack 29
   982                           
   983                           ;incstack = 0
   984                           ;RetardoLCD@a stored from wreg
   985   000928  6E02               	movwf	RetardoLCD@a^0,c
   986                           
   987                           ;LibLCDXC8.h: 275: switch(a){
   988   00092A  D01B               	goto	l893
   989   00092C                     l883:
   990   00092C  0E05               	movlw	5
   991   00092E  6E01               	movwf	??_RetardoLCD^0,c
   992   000930  0EDE               	movlw	222
   993   000932                     u107:
   994   000932  2EE8               	decfsz	wreg,f,c
   995   000934  D7FE               	bra	u107
   996   000936  2E01               	decfsz	??_RetardoLCD^0,f,c
   997   000938  D7FC               	bra	u107
   998                           
   999                           ;LibLCDXC8.h: 278: break;
  1000   00093A  0012               	return	
  1001   00093C                     l885:
  1002   00093C  0E53               	movlw	83
  1003   00093E                     u117:
  1004   00093E  2EE8               	decfsz	wreg,f,c
  1005   000940  D7FE               	bra	u117
  1006   000942  0000               	nop	
  1007                           
  1008                           ;LibLCDXC8.h: 280: _delay((unsigned long)((640)*(1000000/4000000.0)));
  1009   000944  0E35               	movlw	53
  1010   000946                     u127:
  1011   000946  2EE8               	decfsz	wreg,f,c
  1012   000948  D7FE               	bra	u127
  1013   00094A  0000               	nop	
  1014                           
  1015                           ;LibLCDXC8.h: 282: break;
  1016   00094C  0012               	return	
  1017   00094E                     l887:
  1018   00094E  0E08               	movlw	8
  1019   000950                     u137:
  1020   000950  2EE8               	decfsz	wreg,f,c
  1021   000952  D7FE               	bra	u137
  1022   000954  0000               	nop	
  1023                           
  1024                           ;LibLCDXC8.h: 285: break;
  1025   000956  0012               	return	
  1026   000958                     l889:
  1027   000958  0E03               	movlw	3
  1028   00095A                     u147:
  1029   00095A  2EE8               	decfsz	wreg,f,c
  1030   00095C  D7FE               	bra	u147
  1031   00095E  0000               	nop	
  1032                           
  1033                           ;LibLCDXC8.h: 288: break;
  1034   000960  0012               	return	
  1035   000962                     l893:
  1036   000962  5002               	movf	RetardoLCD@a^0,w,c
  1037                           
  1038                           ; Switch size 1, requested type "simple"
  1039                           ; Number of cases is 4, Range of values is 1 to 4
  1040                           ; switch strategies available:
  1041                           ; Name         Instructions Cycles
  1042                           ; simple_byte           13     7 (average)
  1043                           ;	Chosen strategy is simple_byte
  1044   000964  0A01               	xorlw	1	; case 1
  1045   000966  B4D8               	btfsc	status,2,c
  1046   000968  D7E1               	goto	l883
  1047   00096A  0A03               	xorlw	3	; case 2
  1048   00096C  B4D8               	btfsc	status,2,c
  1049   00096E  D7E6               	goto	l885
  1050   000970  0A01               	xorlw	1	; case 3
  1051   000972  B4D8               	btfsc	status,2,c
  1052   000974  D7EC               	goto	l887
  1053   000976  0A07               	xorlw	7	; case 4
  1054   000978  A4D8               	btfss	status,2,c
  1055   00097A  0012               	return	
  1056   00097C  D7ED               	goto	l889
  1057   00097E                     __end_of_RetardoLCD:
  1058                           	callstack 0
  1059                           
  1060 ;; *************** function _HabilitaLCD *****************
  1061 ;; Defined at:
  1062 ;;		line 105 in file "LibLCDXC8.h"
  1063 ;; Parameters:    Size  Location     Type
  1064 ;;		None
  1065 ;; Auto vars:     Size  Location     Type
  1066 ;;		None
  1067 ;; Return value:  Size  Location     Type
  1068 ;;                  1    wreg      void 
  1069 ;; Registers used:
  1070 ;;		wreg
  1071 ;; Tracked objects:
  1072 ;;		On entry : 0/0
  1073 ;;		On exit  : 0/0
  1074 ;;		Unchanged: 0/0
  1075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1076 ;;      Params:         0       0       0       0       0       0       0       0       0
  1077 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1078 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1079 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1080 ;;Total ram usage:        0 bytes
  1081 ;; Hardware stack levels used: 1
  1082 ;; This function calls:
  1083 ;;		Nothing
  1084 ;; This function is called by:
  1085 ;;		_EnviaDato
  1086 ;;		_InicializaLCD
  1087 ;;		_BorraLCD
  1088 ;;		_EscribeLCD_c
  1089 ;;		_DireccionaLCD
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           	psect	text7
  1094   000A38                     __ptext7:
  1095                           	callstack 0
  1096   000A38                     _HabilitaLCD:
  1097                           	callstack 29
  1098                           
  1099                           ;LibLCDXC8.h: 107: LATA4=1;
  1100                           
  1101                           ;incstack = 0
  1102   000A38  8889               	bsf	3977,4,c	;volatile
  1103                           
  1104                           ;LibLCDXC8.h: 108: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1105   000A3A  0E03               	movlw	3
  1106   000A3C                     u157:
  1107   000A3C  2EE8               	decfsz	wreg,f,c
  1108   000A3E  D7FE               	bra	u157
  1109   000A40  0000               	nop	
  1110                           
  1111                           ;LibLCDXC8.h: 110: LATA4=0;
  1112   000A42  9889               	bcf	3977,4,c	;volatile
  1113   000A44  0012               	return		;funcret
  1114   000A46                     __end_of_HabilitaLCD:
  1115                           	callstack 0
  1116                           
  1117 ;; *************** function _ConfiguraLCD *****************
  1118 ;; Defined at:
  1119 ;;		line 55 in file "LibLCDXC8.h"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;  a               1    wreg     unsigned char 
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;  a               1    0[COMRAM] unsigned char 
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  1    wreg      void 
  1126 ;; Registers used:
  1127 ;;		wreg, status,2, status,0
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1133 ;;      Params:         0       0       0       0       0       0       0       0       0
  1134 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1135 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1136 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1137 ;;Total ram usage:        1 bytes
  1138 ;; Hardware stack levels used: 1
  1139 ;; This function calls:
  1140 ;;		Nothing
  1141 ;; This function is called by:
  1142 ;;		_main
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146                           	psect	text8
  1147   0009E0                     __ptext8:
  1148                           	callstack 0
  1149   0009E0                     _ConfiguraLCD:
  1150                           	callstack 30
  1151                           
  1152                           ;incstack = 0
  1153                           ;ConfiguraLCD@a stored from wreg
  1154   0009E0  6E01               	movwf	ConfiguraLCD@a^0,c
  1155                           
  1156                           ;LibLCDXC8.h: 56: if(a==4 | a ==8)
  1157   0009E2  0E04               	movlw	4
  1158   0009E4  1801               	xorwf	ConfiguraLCD@a^0,w,c
  1159   0009E6  B4D8               	btfsc	status,2,c
  1160   0009E8  D004               	goto	u40
  1161   0009EA  0E08               	movlw	8
  1162   0009EC  1801               	xorwf	ConfiguraLCD@a^0,w,c
  1163   0009EE  A4D8               	btfss	status,2,c
  1164   0009F0  0012               	return	
  1165   0009F2                     u40:
  1166                           
  1167                           ;LibLCDXC8.h: 57: interfaz=a;
  1168   0009F2  C001  F008         	movff	ConfiguraLCD@a,_interfaz
  1169   0009F6  0012               	return		;funcret
  1170   0009F8                     __end_of_ConfiguraLCD:
  1171                           	callstack 0
  1172                           
  1173                           	psect	smallconst
  1174   000800                     __psmallconst:
  1175                           	callstack 0
  1176   000800  00                 	db	0
  1177   000801  00                 	db	0	; dummy byte at the end
  1178   000002                     __activetblptr  equ	2
  1179                           
  1180                           	psect	rparam
  1181   000001                     ___rparam_used  equ	1
  1182   000000                     ___param_bank   equ	0
  1183   000000                     __Lparam        equ	__Lrparam
  1184   000000                     __Hparam        equ	__Hrparam
  1185                           
  1186                           	psect	idloc
  1187                           
  1188                           ;Config register IDLOC0 @ 0x200000
  1189                           ;	unspecified, using default values
  1190   200000                     	org	2097152
  1191   200000  FF                 	db	255
  1192                           
  1193                           ;Config register IDLOC1 @ 0x200001
  1194                           ;	unspecified, using default values
  1195   200001                     	org	2097153
  1196   200001  FF                 	db	255
  1197                           
  1198                           ;Config register IDLOC2 @ 0x200002
  1199                           ;	unspecified, using default values
  1200   200002                     	org	2097154
  1201   200002  FF                 	db	255
  1202                           
  1203                           ;Config register IDLOC3 @ 0x200003
  1204                           ;	unspecified, using default values
  1205   200003                     	org	2097155
  1206   200003  FF                 	db	255
  1207                           
  1208                           ;Config register IDLOC4 @ 0x200004
  1209                           ;	unspecified, using default values
  1210   200004                     	org	2097156
  1211   200004  FF                 	db	255
  1212                           
  1213                           ;Config register IDLOC5 @ 0x200005
  1214                           ;	unspecified, using default values
  1215   200005                     	org	2097157
  1216   200005  FF                 	db	255
  1217                           
  1218                           ;Config register IDLOC6 @ 0x200006
  1219                           ;	unspecified, using default values
  1220   200006                     	org	2097158
  1221   200006  FF                 	db	255
  1222                           
  1223                           ;Config register IDLOC7 @ 0x200007
  1224                           ;	unspecified, using default values
  1225   200007                     	org	2097159
  1226   200007  FF                 	db	255
  1227                           
  1228                           	psect	config
  1229                           
  1230                           ;Config register CONFIG1L @ 0x300000
  1231                           ;	unspecified, using default values
  1232                           ;	PLL Prescaler Selection bits
  1233                           ;	PLLDIV = 0x0, unprogrammed default
  1234                           ;	System Clock Postscaler Selection bits
  1235                           ;	CPUDIV = 0x0, unprogrammed default
  1236                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1237                           ;	USBDIV = 0x0, unprogrammed default
  1238   300000                     	org	3145728
  1239   300000  00                 	db	0
  1240                           
  1241                           ;Config register CONFIG1H @ 0x300001
  1242                           ;	Oscillator Selection bits
  1243                           ;	FOSC = INTOSC_EC, Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO)
  1244                           ;	Fail-Safe Clock Monitor Enable bit
  1245                           ;	FCMEN = 0x0, unprogrammed default
  1246                           ;	Internal/External Oscillator Switchover bit
  1247                           ;	IESO = 0x0, unprogrammed default
  1248   300001                     	org	3145729
  1249   300001  09                 	db	9
  1250                           
  1251                           ;Config register CONFIG2L @ 0x300002
  1252                           ;	unspecified, using default values
  1253                           ;	Power-up Timer Enable bit
  1254                           ;	PWRT = 0x1, unprogrammed default
  1255                           ;	Brown-out Reset Enable bits
  1256                           ;	BOR = 0x3, unprogrammed default
  1257                           ;	Brown-out Reset Voltage bits
  1258                           ;	BORV = 0x3, unprogrammed default
  1259                           ;	USB Voltage Regulator Enable bit
  1260                           ;	VREGEN = 0x0, unprogrammed default
  1261   300002                     	org	3145730
  1262   300002  1F                 	db	31
  1263                           
  1264                           ;Config register CONFIG2H @ 0x300003
  1265                           ;	Watchdog Timer Enable bit
  1266                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1267                           ;	Watchdog Timer Postscale Select bits
  1268                           ;	WDTPS = 0xF, unprogrammed default
  1269   300003                     	org	3145731
  1270   300003  1E                 	db	30
  1271                           
  1272                           ; Padding undefined space
  1273   300004                     	org	3145732
  1274   300004  FF                 	db	255
  1275                           
  1276                           ;Config register CONFIG3H @ 0x300005
  1277                           ;	unspecified, using default values
  1278                           ;	CCP2 MUX bit
  1279                           ;	CCP2MX = 0x1, unprogrammed default
  1280                           ;	PORTB A/D Enable bit
  1281                           ;	PBADEN = 0x1, unprogrammed default
  1282                           ;	Low-Power Timer 1 Oscillator Enable bit
  1283                           ;	LPT1OSC = 0x0, unprogrammed default
  1284                           ;	MCLR Pin Enable bit
  1285                           ;	MCLRE = 0x1, unprogrammed default
  1286   300005                     	org	3145733
  1287   300005  83                 	db	131
  1288                           
  1289                           ;Config register CONFIG4L @ 0x300006
  1290                           ;	unspecified, using default values
  1291                           ;	Stack Full/Underflow Reset Enable bit
  1292                           ;	STVREN = 0x1, unprogrammed default
  1293                           ;	Single-Supply ICSP Enable bit
  1294                           ;	LVP = 0x1, unprogrammed default
  1295                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1296                           ;	ICPRT = 0x0, unprogrammed default
  1297                           ;	Extended Instruction Set Enable bit
  1298                           ;	XINST = 0x0, unprogrammed default
  1299                           ;	Background Debugger Enable bit
  1300                           ;	DEBUG = 0x1, unprogrammed default
  1301   300006                     	org	3145734
  1302   300006  85                 	db	133
  1303                           
  1304                           ; Padding undefined space
  1305   300007                     	org	3145735
  1306   300007  FF                 	db	255
  1307                           
  1308                           ;Config register CONFIG5L @ 0x300008
  1309                           ;	unspecified, using default values
  1310                           ;	Code Protection bit
  1311                           ;	CP0 = 0x1, unprogrammed default
  1312                           ;	Code Protection bit
  1313                           ;	CP1 = 0x1, unprogrammed default
  1314                           ;	Code Protection bit
  1315                           ;	CP2 = 0x1, unprogrammed default
  1316                           ;	Code Protection bit
  1317                           ;	CP3 = 0x1, unprogrammed default
  1318   300008                     	org	3145736
  1319   300008  0F                 	db	15
  1320                           
  1321                           ;Config register CONFIG5H @ 0x300009
  1322                           ;	unspecified, using default values
  1323                           ;	Boot Block Code Protection bit
  1324                           ;	CPB = 0x1, unprogrammed default
  1325                           ;	Data EEPROM Code Protection bit
  1326                           ;	CPD = 0x1, unprogrammed default
  1327   300009                     	org	3145737
  1328   300009  C0                 	db	192
  1329                           
  1330                           ;Config register CONFIG6L @ 0x30000A
  1331                           ;	unspecified, using default values
  1332                           ;	Write Protection bit
  1333                           ;	WRT0 = 0x1, unprogrammed default
  1334                           ;	Write Protection bit
  1335                           ;	WRT1 = 0x1, unprogrammed default
  1336                           ;	Write Protection bit
  1337                           ;	WRT2 = 0x1, unprogrammed default
  1338                           ;	Write Protection bit
  1339                           ;	WRT3 = 0x1, unprogrammed default
  1340   30000A                     	org	3145738
  1341   30000A  0F                 	db	15
  1342                           
  1343                           ;Config register CONFIG6H @ 0x30000B
  1344                           ;	unspecified, using default values
  1345                           ;	Configuration Register Write Protection bit
  1346                           ;	WRTC = 0x1, unprogrammed default
  1347                           ;	Boot Block Write Protection bit
  1348                           ;	WRTB = 0x1, unprogrammed default
  1349                           ;	Data EEPROM Write Protection bit
  1350                           ;	WRTD = 0x1, unprogrammed default
  1351   30000B                     	org	3145739
  1352   30000B  E0                 	db	224
  1353                           
  1354                           ;Config register CONFIG7L @ 0x30000C
  1355                           ;	unspecified, using default values
  1356                           ;	Table Read Protection bit
  1357                           ;	EBTR0 = 0x1, unprogrammed default
  1358                           ;	Table Read Protection bit
  1359                           ;	EBTR1 = 0x1, unprogrammed default
  1360                           ;	Table Read Protection bit
  1361                           ;	EBTR2 = 0x1, unprogrammed default
  1362                           ;	Table Read Protection bit
  1363                           ;	EBTR3 = 0x1, unprogrammed default
  1364   30000C                     	org	3145740
  1365   30000C  0F                 	db	15
  1366                           
  1367                           ;Config register CONFIG7H @ 0x30000D
  1368                           ;	unspecified, using default values
  1369                           ;	Boot Block Table Read Protection bit
  1370                           ;	EBTRB = 0x1, unprogrammed default
  1371   30000D                     	org	3145741
  1372   30000D  40                 	db	64
  1373                           tosu	equ	0xFFF
  1374                           tosh	equ	0xFFE
  1375                           tosl	equ	0xFFD
  1376                           stkptr	equ	0xFFC
  1377                           pclatu	equ	0xFFB
  1378                           pclath	equ	0xFFA
  1379                           pcl	equ	0xFF9
  1380                           tblptru	equ	0xFF8
  1381                           tblptrh	equ	0xFF7
  1382                           tblptrl	equ	0xFF6
  1383                           tablat	equ	0xFF5
  1384                           prodh	equ	0xFF4
  1385                           prodl	equ	0xFF3
  1386                           indf0	equ	0xFEF
  1387                           postinc0	equ	0xFEE
  1388                           postdec0	equ	0xFED
  1389                           preinc0	equ	0xFEC
  1390                           plusw0	equ	0xFEB
  1391                           fsr0h	equ	0xFEA
  1392                           fsr0l	equ	0xFE9
  1393                           wreg	equ	0xFE8
  1394                           indf1	equ	0xFE7
  1395                           postinc1	equ	0xFE6
  1396                           postdec1	equ	0xFE5
  1397                           preinc1	equ	0xFE4
  1398                           plusw1	equ	0xFE3
  1399                           fsr1h	equ	0xFE2
  1400                           fsr1l	equ	0xFE1
  1401                           bsr	equ	0xFE0
  1402                           indf2	equ	0xFDF
  1403                           postinc2	equ	0xFDE
  1404                           postdec2	equ	0xFDD
  1405                           preinc2	equ	0xFDC
  1406                           plusw2	equ	0xFDB
  1407                           fsr2h	equ	0xFDA
  1408                           fsr2l	equ	0xFD9
  1409                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      7       8
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_DireccionaLCD
    _main->_EscribeLCD_c
    _InicializaLCD->_EnviaDato
    _BorraLCD->_EnviaDato
    _EscribeLCD_c->_EnviaDato
    _DireccionaLCD->_EnviaDato
    _EnviaDato->_RetardoLCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     375
                                              5 COMRAM     2     2      0
                       _ConfiguraLCD
                      _DireccionaLCD
                       _EscribeLCD_c
                      _InicializaLCD
 ---------------------------------------------------------------------------------
 (1) _InicializaLCD                                        0     0      0     150
                           _BorraLCD
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (2) _BorraLCD                                             0     0      0      75
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (1) _EscribeLCD_c                                         1     1      0      90
                                              4 COMRAM     1     1      0
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (1) _DireccionaLCD                                        1     1      0      90
                                              4 COMRAM     1     1      0
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (2) _EnviaDato                                            2     2      0      60
                                              2 COMRAM     2     2      0
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (2) _RetardoLCD                                           2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _HabilitaLCD                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfiguraLCD                                         1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfiguraLCD
   _DireccionaLCD
     _EnviaDato
       _HabilitaLCD
       _RetardoLCD
     _HabilitaLCD
     _RetardoLCD
   _EscribeLCD_c
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
   _InicializaLCD
     _BorraLCD
       _EnviaDato
       _HabilitaLCD
       _RetardoLCD
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            2047      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0       0      0.0%
BITBIGSFRh         118      0       0      0.0%
BITCOMRAM           95      0       0      0.0%
COMRAM              95      7       8      8.4%
BITBIGSFRl          41      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       8      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Wed Jul 23 18:37:04 2025

                     u40 09F2                       u97 08C0               EnviaDato@a 0004  
                    l124 0926            _InicializaLCD 0802                      l905 09B6  
                    l927 0814                      l937 0832                      l883 092C  
                    l947 0850                      l885 093C                      l893 0962  
                    l887 094E                      l967 0888                      l889 0958  
                    u107 0932                      u117 093E                      u127 0946  
                    u137 0950                      u147 095A                      u157 0A3C  
                    wreg 0FE8                     _LATD 0F8C           ??_EscribeLCD_c 0005  
                   _main 089E                     start 0000             ___param_bank 0000  
         ?_InicializaLCD 0001                    ?_main 0001            EscribeLCD_c@a 0005  
                  _LATA3 7C4B                    _LATA4 7C4C                    tablat 0FF5  
            _HabilitaLCD 0A38                    status 0FD8         __end_of_BorraLCD 0A38  
        __initialization 09C4             __end_of_main 0928                   ??_main 0006  
   __end_of_ConfiguraLCD 09F8            __activetblptr 0002           DireccionaLCD@a 0005  
  __end_of_DireccionaLCD 0A24               _RetardoLCD 0928          ??_InicializaLCD 0005  
                 isa$std 0001     __end_of_EscribeLCD_c 0A0E             __pdataCOMRAM 0008  
           __mediumconst 0000                   tblptrh 0FF7                   tblptrl 0FF6  
                 tblptru 0FF8               __accesstop 0060  __end_of__initialization 09D6  
          ___rparam_used 0001           __pcstackCOMRAM 0001        __end_of_EnviaDato 09C4  
              ?_BorraLCD 0001              ?_RetardoLCD 0001              RetardoLCD@a 0002  
             ??_BorraLCD 0005             ?_HabilitaLCD 0001             _ConfiguraLCD 09E0  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0800  
                __pcinit 09C4                  __ramtop 0800                  __ptext0 089E  
                __ptext1 0802                  __ptext2 0A24                  __ptext3 09F8  
                __ptext4 0A0E                  __ptext5 097E                  __ptext6 0928  
                __ptext7 0A38                  __ptext8 09E0     end_of_initialization 09D6  
          __Lmediumconst 0000             _EscribeLCD_c 09F8                _TRISAbits 0F92  
              _TRISDbits 0F95            __pidataCOMRAM 0A46    __end_of_InicializaLCD 089E  
              _EnviaDato 097E      start_initialization 09C4             ??_RetardoLCD 0001  
             ?_EnviaDato 0001       __end_of_RetardoLCD 097E            _DireccionaLCD 0A0E  
            __smallconst 0800                 _LATAbits 0F89                 _LATDbits 0F8C  
         ?_DireccionaLCD 0001              ??_EnviaDato 0003                 _BorraLCD 0A24  
               __Hrparam 0000                 __Lrparam 0000            ConfiguraLCD@a 0001  
        ??_DireccionaLCD 0005                 _interfaz 0008                 isa$xinst 0000  
          ??_HabilitaLCD 0001            ?_ConfiguraLCD 0001           ??_ConfiguraLCD 0001  
          ?_EscribeLCD_c 0001      __end_of_HabilitaLCD 0A46  
